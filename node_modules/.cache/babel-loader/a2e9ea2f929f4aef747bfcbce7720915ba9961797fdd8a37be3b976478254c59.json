{"ast":null,"code":"var _jsxFileName = \"/Users/jayachandran/Downloads/newofile/frontend-1/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useCallback } from 'react';\n// import axios from 'axios';\n// import './App.css';\n\n// const API_TIMEOUT = 10000;\n// const MAX_RETRIES = 3;\n\n// function App() {\n//   const [name, setName] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [users, setUsers] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState({\n//     isConnected: false,\n//     lastChecked: null\n//   });\n\n//   const createAxiosInstance = useCallback(() => {\n//     const instance = axios.create({\n//       baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n//       timeout: API_TIMEOUT,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Accept': 'application/json'\n//       }\n//     });\n\n//     instance.interceptors.response.use(\n//       response => response,\n//       error => {\n//         console.error('Axios Interceptor Error:', error);\n\n//         if (error.response) {\n//           // Server responded with an error\n//           setMessage(error.response.data.message || 'An unexpected error occurred');\n//         } else if (error.request) {\n//           // Request made but no response received\n//           setMessage('Network error. Please check your connection.');\n//           setConnectionStatus({\n//             isConnected: false,\n//             lastChecked: new Date().toLocaleString()\n//           });\n//         } else {\n//           // Something else went wrong\n//           setMessage('Error in request setup');\n//         }\n\n//         return Promise.reject(error);\n//       }\n//     );\n\n//     return instance;\n//   }, []);\n\n//   const handleApiCall = useCallback(async (apiCall, errorMessage) => {\n//     const performApiCall = async (retriesLeft) => {\n//       try {\n//         setIsLoading(true);\n//         const result = await apiCall();\n//         setMessage(result.message || 'Operation successful');\n//         setIsLoading(false);\n//         return result;\n//       } catch (error) {\n//         console.error('API Error:', error);\n\n//         if (retriesLeft === 1) {\n//           const errorMsg = error.response?.data?.message || \n//                            error.message || \n//                            errorMessage;\n\n//           setMessage(errorMsg);\n//           setIsLoading(false);\n\n//           if (!error.response) {\n//             setConnectionStatus({\n//               isConnected: false,\n//               lastChecked: new Date().toLocaleString()\n//             });\n//           }\n\n//           throw error;\n//         }\n\n//         await new Promise(resolve => setTimeout(resolve, 1000 * (MAX_RETRIES - retriesLeft + 1)));\n//         return performApiCall(retriesLeft - 1);\n//       }\n//     };\n\n//     return performApiCall(MAX_RETRIES);\n//   }, []);\n\n//   const testConnection = useCallback(async () => {\n//     const api = createAxiosInstance();\n//     try {\n//       await api.get('/health');\n//       setConnectionStatus({\n//         isConnected: true,\n//         lastChecked: new Date().toLocaleString()\n//       });\n//       setMessage('Server connection established successfully');\n//     } catch (error) {\n//       console.error('Connection Test Error:', error);\n//       setConnectionStatus({\n//         isConnected: false,\n//         lastChecked: new Date().toLocaleString()\n//       });\n//       setMessage('Failed to connect to server');\n//     }\n//   }, [createAxiosInstance]);\n\n//   const fetchUsers = useCallback(async () => {\n//     const api = createAxiosInstance();\n//     await handleApiCall(\n//       async () => {\n//         const response = await api.get('/users');\n//         setUsers(response.data.data || []);\n//         return response.data;\n//       },\n//       'Failed to fetch users'\n//     );\n//   }, [createAxiosInstance, handleApiCall]);\n\n//   const addUser = useCallback(async (e) => {\n//     e.preventDefault();\n//     const api = createAxiosInstance();\n//     await handleApiCall(\n//       async () => {\n//         const response = await api.post('/users', { name, email });\n//         setName('');\n//         setEmail('');\n//         await fetchUsers();\n//         return response.data;\n//       },\n//       'Failed to add user'\n//     );\n//   }, [createAxiosInstance, handleApiCall, fetchUsers, name, email]);\n\n//   const deleteUser = useCallback(async (userId) => {\n//     const api = createAxiosInstance();\n//     await handleApiCall(\n//       async () => {\n//         const response = await api.delete(`/users/${userId}`);\n//         await fetchUsers();\n//         return response.data;\n//       },\n//       'Failed to delete user'\n//     );\n//   }, [createAxiosInstance, handleApiCall, fetchUsers]);\n\n//   useEffect(() => {\n//     testConnection();\n//     fetchUsers();\n//   }, [testConnection, fetchUsers]);\n\n//   return (\n//     <div className=\"container\">\n//       <div className=\"form-wrapper\">\n//         <h1>User Management App</h1>\n\n//         <div className={`connection-status ${connectionStatus.isConnected ? 'connected' : 'disconnected'}`}>\n//           Server Status: {connectionStatus.isConnected ? 'Connected' : 'Disconnected'}\n//           <small>Last checked: {connectionStatus.lastChecked || 'Never'}</small>\n//           <button onClick={testConnection} disabled={isLoading}>\n//             Recheck Connection\n//           </button>\n//         </div>\n\n//         {message && (\n//           <div className={`message ${message.includes('Failed') || message.includes('error') ? 'error' : 'success'}`}>\n//             {message}\n//           </div>\n//         )}\n\n//         <form onSubmit={addUser} className=\"user-form\">\n//           <input\n//             type=\"text\"\n//             placeholder=\"Name\"\n//             value={name}\n//             onChange={(e) => setName(e.target.value)}\n//             required\n//             disabled={!connectionStatus.isConnected || isLoading}\n//           />\n//           <input\n//             type=\"email\"\n//             placeholder=\"Email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             required\n//             disabled={!connectionStatus.isConnected || isLoading}\n//           />\n//           <button \n//             type=\"submit\" \n//             disabled={!connectionStatus.isConnected || isLoading}\n//           >\n//             {isLoading ? 'Processing...' : 'Add User'}\n//           </button>\n//         </form>\n\n//         {users.length > 0 && (\n//           <div className=\"users-list\">\n//             <h2>Users ({users.length})</h2>\n//             <ul>\n//               {users.map(user => (\n//                 <li key={user._id}>\n//                   <div>\n//                     <strong>{user.name}</strong>\n//                     <span>{user.email}</span>\n//                   </div>\n//                   <button\n//                     onClick={() => deleteUser(user._id)}\n//                     disabled={isLoading}\n//                   >\n//                     Delete\n//                   </button>\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nfunction App() {\n  _s();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState({\n    isConnected: false,\n    lastChecked: null\n  });\n  const api = axios.create({\n    baseURL: API_URL,\n    timeout: 10000\n  });\n  const testConnection = useCallback(async () => {\n    try {\n      await api.get('/health');\n      setConnectionStatus({\n        isConnected: true,\n        lastChecked: new Date().toLocaleString()\n      });\n      setMessage('Server connected');\n    } catch (error) {\n      console.error('Connection Error:', error);\n      setConnectionStatus({\n        isConnected: false,\n        lastChecked: new Date().toLocaleString()\n      });\n      setMessage(`Connection failed: ${error.message}`);\n    }\n  }, []);\n  const fetchUsers = useCallback(async () => {\n    try {\n      const response = await api.get('/users');\n      setUsers(response.data.data || []);\n    } catch (error) {\n      setMessage(`Fetch error: ${error.message}`);\n    }\n  }, []);\n  const addUser = async e => {\n    e.preventDefault();\n    try {\n      setIsLoading(true);\n      await api.post('/users', {\n        name,\n        email\n      });\n      setName('');\n      setEmail('');\n      await fetchUsers();\n      setMessage('User added');\n    } catch (error) {\n      setMessage(`Add user error: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const deleteUser = async userId => {\n    try {\n      setIsLoading(true);\n      await api.delete(`/users/${userId}`);\n      await fetchUsers();\n      setMessage('User deleted');\n    } catch (error) {\n      setMessage(`Delete error: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    testConnection();\n    fetchUsers();\n  }, [testConnection, fetchUsers]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User Management App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `connection-status ${connectionStatus.isConnected ? 'connected' : 'disconnected'}`,\n      children: [\"Status: \", connectionStatus.isConnected ? 'Connected' : 'Disconnected', /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: testConnection,\n        children: \"Recheck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addUser,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Name\",\n        value: name,\n        onChange: e => setName(e.target.value),\n        required: true,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Email\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        required: true,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        children: isLoading ? 'Processing...' : 'Add User'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"users-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Users (\", users.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), users.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [user.name, \" - \", user.email, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteUser(user._id),\n          disabled: isLoading,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 13\n        }, this)]\n      }, user._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"5dYTG/cryqQudQ4dkvJCnla2T2E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","App","_s","name","setName","email","setEmail","message","setMessage","users","setUsers","isLoading","setIsLoading","connectionStatus","setConnectionStatus","isConnected","lastChecked","api","create","baseURL","timeout","testConnection","get","Date","toLocaleString","error","console","fetchUsers","response","data","addUser","e","preventDefault","post","deleteUser","userId","delete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","type","placeholder","value","onChange","target","required","disabled","length","map","user","_id","_c","$RefreshReg$"],"sources":["/Users/jayachandran/Downloads/newofile/frontend-1/src/App.js"],"sourcesContent":["\n// import React, { useState, useEffect, useCallback } from 'react';\n// import axios from 'axios';\n// import './App.css';\n\n// const API_TIMEOUT = 10000;\n// const MAX_RETRIES = 3;\n\n// function App() {\n//   const [name, setName] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [users, setUsers] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState({\n//     isConnected: false,\n//     lastChecked: null\n//   });\n\n//   const createAxiosInstance = useCallback(() => {\n//     const instance = axios.create({\n//       baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n//       timeout: API_TIMEOUT,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Accept': 'application/json'\n//       }\n//     });\n\n//     instance.interceptors.response.use(\n//       response => response,\n//       error => {\n//         console.error('Axios Interceptor Error:', error);\n        \n//         if (error.response) {\n//           // Server responded with an error\n//           setMessage(error.response.data.message || 'An unexpected error occurred');\n//         } else if (error.request) {\n//           // Request made but no response received\n//           setMessage('Network error. Please check your connection.');\n//           setConnectionStatus({\n//             isConnected: false,\n//             lastChecked: new Date().toLocaleString()\n//           });\n//         } else {\n//           // Something else went wrong\n//           setMessage('Error in request setup');\n//         }\n        \n//         return Promise.reject(error);\n//       }\n//     );\n\n//     return instance;\n//   }, []);\n\n//   const handleApiCall = useCallback(async (apiCall, errorMessage) => {\n//     const performApiCall = async (retriesLeft) => {\n//       try {\n//         setIsLoading(true);\n//         const result = await apiCall();\n//         setMessage(result.message || 'Operation successful');\n//         setIsLoading(false);\n//         return result;\n//       } catch (error) {\n//         console.error('API Error:', error);\n        \n//         if (retriesLeft === 1) {\n//           const errorMsg = error.response?.data?.message || \n//                            error.message || \n//                            errorMessage;\n          \n//           setMessage(errorMsg);\n//           setIsLoading(false);\n          \n//           if (!error.response) {\n//             setConnectionStatus({\n//               isConnected: false,\n//               lastChecked: new Date().toLocaleString()\n//             });\n//           }\n          \n//           throw error;\n//         }\n        \n//         await new Promise(resolve => setTimeout(resolve, 1000 * (MAX_RETRIES - retriesLeft + 1)));\n//         return performApiCall(retriesLeft - 1);\n//       }\n//     };\n\n//     return performApiCall(MAX_RETRIES);\n//   }, []);\n\n//   const testConnection = useCallback(async () => {\n//     const api = createAxiosInstance();\n//     try {\n//       await api.get('/health');\n//       setConnectionStatus({\n//         isConnected: true,\n//         lastChecked: new Date().toLocaleString()\n//       });\n//       setMessage('Server connection established successfully');\n//     } catch (error) {\n//       console.error('Connection Test Error:', error);\n//       setConnectionStatus({\n//         isConnected: false,\n//         lastChecked: new Date().toLocaleString()\n//       });\n//       setMessage('Failed to connect to server');\n//     }\n//   }, [createAxiosInstance]);\n\n//   const fetchUsers = useCallback(async () => {\n//     const api = createAxiosInstance();\n//     await handleApiCall(\n//       async () => {\n//         const response = await api.get('/users');\n//         setUsers(response.data.data || []);\n//         return response.data;\n//       },\n//       'Failed to fetch users'\n//     );\n//   }, [createAxiosInstance, handleApiCall]);\n\n//   const addUser = useCallback(async (e) => {\n//     e.preventDefault();\n//     const api = createAxiosInstance();\n//     await handleApiCall(\n//       async () => {\n//         const response = await api.post('/users', { name, email });\n//         setName('');\n//         setEmail('');\n//         await fetchUsers();\n//         return response.data;\n//       },\n//       'Failed to add user'\n//     );\n//   }, [createAxiosInstance, handleApiCall, fetchUsers, name, email]);\n\n//   const deleteUser = useCallback(async (userId) => {\n//     const api = createAxiosInstance();\n//     await handleApiCall(\n//       async () => {\n//         const response = await api.delete(`/users/${userId}`);\n//         await fetchUsers();\n//         return response.data;\n//       },\n//       'Failed to delete user'\n//     );\n//   }, [createAxiosInstance, handleApiCall, fetchUsers]);\n\n//   useEffect(() => {\n//     testConnection();\n//     fetchUsers();\n//   }, [testConnection, fetchUsers]);\n\n//   return (\n//     <div className=\"container\">\n//       <div className=\"form-wrapper\">\n//         <h1>User Management App</h1>\n        \n//         <div className={`connection-status ${connectionStatus.isConnected ? 'connected' : 'disconnected'}`}>\n//           Server Status: {connectionStatus.isConnected ? 'Connected' : 'Disconnected'}\n//           <small>Last checked: {connectionStatus.lastChecked || 'Never'}</small>\n//           <button onClick={testConnection} disabled={isLoading}>\n//             Recheck Connection\n//           </button>\n//         </div>\n\n//         {message && (\n//           <div className={`message ${message.includes('Failed') || message.includes('error') ? 'error' : 'success'}`}>\n//             {message}\n//           </div>\n//         )}\n\n//         <form onSubmit={addUser} className=\"user-form\">\n//           <input\n//             type=\"text\"\n//             placeholder=\"Name\"\n//             value={name}\n//             onChange={(e) => setName(e.target.value)}\n//             required\n//             disabled={!connectionStatus.isConnected || isLoading}\n//           />\n//           <input\n//             type=\"email\"\n//             placeholder=\"Email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             required\n//             disabled={!connectionStatus.isConnected || isLoading}\n//           />\n//           <button \n//             type=\"submit\" \n//             disabled={!connectionStatus.isConnected || isLoading}\n//           >\n//             {isLoading ? 'Processing...' : 'Add User'}\n//           </button>\n//         </form>\n\n//         {users.length > 0 && (\n//           <div className=\"users-list\">\n//             <h2>Users ({users.length})</h2>\n//             <ul>\n//               {users.map(user => (\n//                 <li key={user._id}>\n//                   <div>\n//                     <strong>{user.name}</strong>\n//                     <span>{user.email}</span>\n//                   </div>\n//                   <button\n//                     onClick={() => deleteUser(user._id)}\n//                     disabled={isLoading}\n//                   >\n//                     Delete\n//                   </button>\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nfunction App() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState({\n    isConnected: false,\n    lastChecked: null\n  });\n\n  const api = axios.create({\n    baseURL: API_URL,\n    timeout: 10000\n  });\n\n  const testConnection = useCallback(async () => {\n    try {\n      await api.get('/health');\n      setConnectionStatus({\n        isConnected: true,\n        lastChecked: new Date().toLocaleString()\n      });\n      setMessage('Server connected');\n    } catch (error) {\n      console.error('Connection Error:', error);\n      setConnectionStatus({\n        isConnected: false,\n        lastChecked: new Date().toLocaleString()\n      });\n      setMessage(`Connection failed: ${error.message}`);\n    }\n  }, []);\n\n  const fetchUsers = useCallback(async () => {\n    try {\n      const response = await api.get('/users');\n      setUsers(response.data.data || []);\n    } catch (error) {\n      setMessage(`Fetch error: ${error.message}`);\n    }\n  }, []);\n\n  const addUser = async (e) => {\n    e.preventDefault();\n    try {\n      setIsLoading(true);\n      await api.post('/users', { name, email });\n      setName('');\n      setEmail('');\n      await fetchUsers();\n      setMessage('User added');\n    } catch (error) {\n      setMessage(`Add user error: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const deleteUser = async (userId) => {\n    try {\n      setIsLoading(true);\n      await api.delete(`/users/${userId}`);\n      await fetchUsers();\n      setMessage('User deleted');\n    } catch (error) {\n      setMessage(`Delete error: ${error.message}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    testConnection();\n    fetchUsers();\n  }, [testConnection, fetchUsers]);\n\n  return (\n    <div className=\"container\">\n      <h1>User Management App</h1>\n      \n      <div className={`connection-status ${connectionStatus.isConnected ? 'connected' : 'disconnected'}`}>\n        Status: {connectionStatus.isConnected ? 'Connected' : 'Disconnected'}\n        <button onClick={testConnection}>Recheck</button>\n      </div>\n\n      {message && <div className=\"message\">{message}</div>}\n\n      <form onSubmit={addUser}>\n        <input\n          type=\"text\"\n          placeholder=\"Name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          required\n          disabled={isLoading}\n        />\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n          disabled={isLoading}\n        />\n        <button type=\"submit\" disabled={isLoading}>\n          {isLoading ? 'Processing...' : 'Add User'}\n        </button>\n      </form>\n\n      <div className=\"users-list\">\n        <h2>Users ({users.length})</h2>\n        {users.map(user => (\n          <div key={user._id}>\n            {user.name} - {user.email}\n            <button \n              onClick={() => deleteUser(user._id)}\n              disabled={isLoading}\n            >\n              Delete\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappingszB,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACsB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGvB,QAAQ,CAAC;IACvDwB,WAAW,EAAE,KAAK;IAClBC,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,MAAMC,GAAG,GAAGvB,KAAK,CAACwB,MAAM,CAAC;IACvBC,OAAO,EAAEtB,OAAO;IAChBuB,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,MAAMC,cAAc,GAAG5B,WAAW,CAAC,YAAY;IAC7C,IAAI;MACF,MAAMwB,GAAG,CAACK,GAAG,CAAC,SAAS,CAAC;MACxBR,mBAAmB,CAAC;QAClBC,WAAW,EAAE,IAAI;QACjBC,WAAW,EAAE,IAAIO,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC;MACzC,CAAC,CAAC;MACFhB,UAAU,CAAC,kBAAkB,CAAC;IAChC,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzCX,mBAAmB,CAAC;QAClBC,WAAW,EAAE,KAAK;QAClBC,WAAW,EAAE,IAAIO,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC;MACzC,CAAC,CAAC;MACFhB,UAAU,CAAC,sBAAsBiB,KAAK,CAAClB,OAAO,EAAE,CAAC;IACnD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMoB,UAAU,GAAGlC,WAAW,CAAC,YAAY;IACzC,IAAI;MACF,MAAMmC,QAAQ,GAAG,MAAMX,GAAG,CAACK,GAAG,CAAC,QAAQ,CAAC;MACxCZ,QAAQ,CAACkB,QAAQ,CAACC,IAAI,CAACA,IAAI,IAAI,EAAE,CAAC;IACpC,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdjB,UAAU,CAAC,gBAAgBiB,KAAK,CAAClB,OAAO,EAAE,CAAC;IAC7C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMuB,OAAO,GAAG,MAAOC,CAAC,IAAK;IAC3BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACFpB,YAAY,CAAC,IAAI,CAAC;MAClB,MAAMK,GAAG,CAACgB,IAAI,CAAC,QAAQ,EAAE;QAAE9B,IAAI;QAAEE;MAAM,CAAC,CAAC;MACzCD,OAAO,CAAC,EAAE,CAAC;MACXE,QAAQ,CAAC,EAAE,CAAC;MACZ,MAAMqB,UAAU,CAAC,CAAC;MAClBnB,UAAU,CAAC,YAAY,CAAC;IAC1B,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdjB,UAAU,CAAC,mBAAmBiB,KAAK,CAAClB,OAAO,EAAE,CAAC;IAChD,CAAC,SAAS;MACRK,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMsB,UAAU,GAAG,MAAOC,MAAM,IAAK;IACnC,IAAI;MACFvB,YAAY,CAAC,IAAI,CAAC;MAClB,MAAMK,GAAG,CAACmB,MAAM,CAAC,UAAUD,MAAM,EAAE,CAAC;MACpC,MAAMR,UAAU,CAAC,CAAC;MAClBnB,UAAU,CAAC,cAAc,CAAC;IAC5B,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdjB,UAAU,CAAC,iBAAiBiB,KAAK,CAAClB,OAAO,EAAE,CAAC;IAC9C,CAAC,SAAS;MACRK,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACd6B,cAAc,CAAC,CAAC;IAChBM,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACN,cAAc,EAAEM,UAAU,CAAC,CAAC;EAEhC,oBACE/B,OAAA;IAAKyC,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxB1C,OAAA;MAAA0C,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE5B9C,OAAA;MAAKyC,SAAS,EAAE,qBAAqBxB,gBAAgB,CAACE,WAAW,GAAG,WAAW,GAAG,cAAc,EAAG;MAAAuB,QAAA,GAAC,UAC1F,EAACzB,gBAAgB,CAACE,WAAW,GAAG,WAAW,GAAG,cAAc,eACpEnB,OAAA;QAAQ+C,OAAO,EAAEtB,cAAe;QAAAiB,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,EAELnC,OAAO,iBAAIX,OAAA;MAAKyC,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAE/B;IAAO;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAEpD9C,OAAA;MAAMgD,QAAQ,EAAEd,OAAQ;MAAAQ,QAAA,gBACtB1C,OAAA;QACEiD,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,MAAM;QAClBC,KAAK,EAAE5C,IAAK;QACZ6C,QAAQ,EAAGjB,CAAC,IAAK3B,OAAO,CAAC2B,CAAC,CAACkB,MAAM,CAACF,KAAK,CAAE;QACzCG,QAAQ;QACRC,QAAQ,EAAExC;MAAU;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC,eACF9C,OAAA;QACEiD,IAAI,EAAC,OAAO;QACZC,WAAW,EAAC,OAAO;QACnBC,KAAK,EAAE1C,KAAM;QACb2C,QAAQ,EAAGjB,CAAC,IAAKzB,QAAQ,CAACyB,CAAC,CAACkB,MAAM,CAACF,KAAK,CAAE;QAC1CG,QAAQ;QACRC,QAAQ,EAAExC;MAAU;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC,eACF9C,OAAA;QAAQiD,IAAI,EAAC,QAAQ;QAACM,QAAQ,EAAExC,SAAU;QAAA2B,QAAA,EACvC3B,SAAS,GAAG,eAAe,GAAG;MAAU;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAEP9C,OAAA;MAAKyC,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzB1C,OAAA;QAAA0C,QAAA,GAAI,SAAO,EAAC7B,KAAK,CAAC2C,MAAM,EAAC,GAAC;MAAA;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC9BjC,KAAK,CAAC4C,GAAG,CAACC,IAAI,iBACb1D,OAAA;QAAA0C,QAAA,GACGgB,IAAI,CAACnD,IAAI,EAAC,KAAG,EAACmD,IAAI,CAACjD,KAAK,eACzBT,OAAA;UACE+C,OAAO,EAAEA,CAAA,KAAMT,UAAU,CAACoB,IAAI,CAACC,GAAG,CAAE;UACpCJ,QAAQ,EAAExC,SAAU;UAAA2B,QAAA,EACrB;QAED;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAPDY,IAAI,CAACC,GAAG;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQb,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACxC,EAAA,CA9HQD,GAAG;AAAAuD,EAAA,GAAHvD,GAAG;AAgIZ,eAAeA,GAAG;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}