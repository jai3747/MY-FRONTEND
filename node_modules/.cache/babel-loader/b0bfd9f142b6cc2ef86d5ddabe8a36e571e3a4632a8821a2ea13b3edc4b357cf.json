{"ast":null,"code":"var _jsxFileName = \"/Users/jayachandran/Downloads/newofile/frontend-1/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useCallback } from 'react';\n// import axios from 'axios';\n// import './App.css';\n\n// const API_TIMEOUT = 10000;\n// const MAX_RETRIES = 3;\n\n// function App() {\n//   const [name, setName] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [users, setUsers] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState({\n//     isConnected: false,\n//     lastChecked: null\n//   });\n\n//   const createAxiosInstance = useCallback(() => {\n//     return axios.create({\n//       baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n//       timeout: API_TIMEOUT,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Accept': 'application/json'\n//       },\n//       withCredentials: true\n//     });\n//   }, []);\n\n//   const handleApiCall = useCallback(async (apiCall, errorMessage) => {\n//     let currentRetries = 0;\n//     while (currentRetries < MAX_RETRIES) {\n//       try {\n//         setIsLoading(true);\n//         const result = await apiCall();\n//         setMessage(result.message || 'Operation successful');\n//         setIsLoading(false);\n//         return result;\n//       } catch (error) {\n//         currentRetries++;\n//         console.error(`${errorMessage} (Attempt ${currentRetries}):`, error);\n//         if (currentRetries === MAX_RETRIES) {\n//           setMessage(`${errorMessage}. Please try again later.`);\n//           setIsLoading(false);\n//           throw error;\n//         }\n//         await new Promise(resolve => setTimeout(resolve, 1000 * currentRetries));\n//       }\n//     }\n//   }, []);\n\n//   const testConnection = useCallback(async () => {\n//     const api = createAxiosInstance();\n//     try {\n//       await api.get('/health');\n//       setConnectionStatus({\n//         isConnected: true,\n//         lastChecked: new Date().toLocaleString()\n//       });\n//       setMessage('Server connection established successfully');\n//     } catch (error) {\n//       setConnectionStatus({\n//         isConnected: false,\n//         lastChecked: new Date().toLocaleString()\n//       });\n//       setMessage('Failed to connect to server');\n//     }\n//   }, [createAxiosInstance]);\n\n//   const fetchUsers = useCallback(async () => {\n//     const api = createAxiosInstance();\n//     await handleApiCall(\n//       async () => {\n//         const response = await api.get('/users');\n//         setUsers(response.data.data || []);\n//         return response.data;\n//       },\n//       'Failed to fetch users'\n//     );\n//   }, [createAxiosInstance, handleApiCall]);\n\n//   const addUser = useCallback(async (e) => {\n//     e.preventDefault();\n//     const api = createAxiosInstance();\n//     await handleApiCall(\n//       async () => {\n//         const response = await api.post('/users', { name, email });\n//         setName('');\n//         setEmail('');\n//         await fetchUsers();\n//         return response.data;\n//       },\n//       'Failed to add user'\n//     );\n//   }, [createAxiosInstance, handleApiCall, fetchUsers, name, email]);\n\n//   const deleteUser = useCallback(async (userId) => {\n//     const api = createAxiosInstance();\n//     await handleApiCall(\n//       async () => {\n//         const response = await api.delete(`/users/${userId}`);\n//         await fetchUsers();\n//         return response.data;\n//       },\n//       'Failed to delete user'\n//     );\n//   }, [createAxiosInstance, handleApiCall, fetchUsers]);\n\n//   useEffect(() => {\n//     testConnection();\n//     fetchUsers();\n//   }, [testConnection, fetchUsers]);\n\n//   return (\n//     <div className=\"container\">\n//       <div className=\"form-wrapper\">\n//         <h1>User Management App</h1>\n\n//         <div className={`connection-status ${connectionStatus.isConnected ? 'connected' : 'disconnected'}`}>\n//           Server Status: {connectionStatus.isConnected ? 'Connected' : 'Disconnected'}\n//           <small>Last checked: {connectionStatus.lastChecked || 'Never'}</small>\n//           <button onClick={testConnection} disabled={isLoading}>\n//             Recheck Connection\n//           </button>\n//         </div>\n\n//         {message && (\n//           <div className={`message ${message.includes('Failed') ? 'error' : 'success'}`}>\n//             {message}\n//           </div>\n//         )}\n\n//         <form onSubmit={addUser} className=\"user-form\">\n//           <input\n//             type=\"text\"\n//             placeholder=\"Name\"\n//             value={name}\n//             onChange={(e) => setName(e.target.value)}\n//             required\n//             disabled={!connectionStatus.isConnected || isLoading}\n//           />\n//           <input\n//             type=\"email\"\n//             placeholder=\"Email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             required\n//             disabled={!connectionStatus.isConnected || isLoading}\n//           />\n//           <button \n//             type=\"submit\" \n//             disabled={!connectionStatus.isConnected || isLoading}\n//           >\n//             {isLoading ? 'Processing...' : 'Add User'}\n//           </button>\n//         </form>\n\n//         {users.length > 0 && (\n//           <div className=\"users-list\">\n//             <h2>Users ({users.length})</h2>\n//             <ul>\n//               {users.map(user => (\n//                 <li key={user._id}>\n//                   <div>\n//                     <strong>{user.name}</strong>\n//                     <span>{user.email}</span>\n//                   </div>\n//                   <button\n//                     onClick={() => deleteUser(user._id)}\n//                     disabled={isLoading}\n//                   >\n//                     Delete\n//                   </button>\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_TIMEOUT = 10000;\nconst MAX_RETRIES = 3;\nfunction App() {\n  _s();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState({\n    isConnected: false,\n    lastChecked: null\n  });\n  const createAxiosInstance = useCallback(() => {\n    return axios.create({\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n      timeout: API_TIMEOUT,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      withCredentials: true\n    });\n  }, []);\n  const handleApiCall = useCallback(async (apiCall, errorMessage) => {\n    const performApiCall = async retriesLeft => {\n      try {\n        setIsLoading(true);\n        const result = await apiCall();\n        setMessage(result.message || 'Operation successful');\n        setIsLoading(false);\n        return result;\n      } catch (error) {\n        if (retriesLeft === 1) {\n          setMessage(`${errorMessage}. Please try again later.`);\n          setIsLoading(false);\n          throw error;\n        }\n        console.error(`${errorMessage} (Attempt ${MAX_RETRIES - retriesLeft + 1}):`, error);\n        await new Promise(resolve => setTimeout(resolve, 1000 * (MAX_RETRIES - retriesLeft + 1)));\n        return performApiCall(retriesLeft - 1);\n      }\n    };\n    return performApiCall(MAX_RETRIES);\n  }, []);\n  const testConnection = useCallback(async () => {\n    const api = createAxiosInstance();\n    try {\n      await api.get('/health');\n      setConnectionStatus({\n        isConnected: true,\n        lastChecked: new Date().toLocaleString()\n      });\n      setMessage('Server connection established successfully');\n    } catch (error) {\n      setConnectionStatus({\n        isConnected: false,\n        lastChecked: new Date().toLocaleString()\n      });\n      setMessage('Failed to connect to server');\n    }\n  }, [createAxiosInstance]);\n  const fetchUsers = useCallback(async () => {\n    const api = createAxiosInstance();\n    await handleApiCall(async () => {\n      const response = await api.get('/users');\n      setUsers(response.data.data || []);\n      return response.data;\n    }, 'Failed to fetch users');\n  }, [createAxiosInstance, handleApiCall]);\n  const addUser = useCallback(async e => {\n    e.preventDefault();\n    const api = createAxiosInstance();\n    await handleApiCall(async () => {\n      const response = await api.post('/users', {\n        name,\n        email\n      });\n      setName('');\n      setEmail('');\n      await fetchUsers();\n      return response.data;\n    }, 'Failed to add user');\n  }, [createAxiosInstance, handleApiCall, fetchUsers, name, email]);\n  const deleteUser = useCallback(async userId => {\n    const api = createAxiosInstance();\n    await handleApiCall(async () => {\n      const response = await api.delete(`/users/${userId}`);\n      await fetchUsers();\n      return response.data;\n    }, 'Failed to delete user');\n  }, [createAxiosInstance, handleApiCall, fetchUsers]);\n  useEffect(() => {\n    testConnection();\n    fetchUsers();\n  }, [testConnection, fetchUsers]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"User Management App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `connection-status ${connectionStatus.isConnected ? 'connected' : 'disconnected'}`,\n        children: [\"Server Status: \", connectionStatus.isConnected ? 'Connected' : 'Disconnected', /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Last checked: \", connectionStatus.lastChecked || 'Never']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: testConnection,\n          disabled: isLoading,\n          children: \"Recheck Connection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.includes('Failed') ? 'error' : 'success'}`,\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: addUser,\n        className: \"user-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Name\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          required: true,\n          disabled: !connectionStatus.isConnected || isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          required: true,\n          disabled: !connectionStatus.isConnected || isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: !connectionStatus.isConnected || isLoading,\n          children: isLoading ? 'Processing...' : 'Add User'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), users.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"users-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Users (\", users.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: user.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: user.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deleteUser(user._id),\n              disabled: isLoading,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 19\n            }, this)]\n          }, user._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"c/3wVE8RZdLGQZa4XmlBsqA36GA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","API_TIMEOUT","MAX_RETRIES","App","_s","name","setName","email","setEmail","message","setMessage","users","setUsers","isLoading","setIsLoading","connectionStatus","setConnectionStatus","isConnected","lastChecked","createAxiosInstance","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","withCredentials","handleApiCall","apiCall","errorMessage","performApiCall","retriesLeft","result","error","console","Promise","resolve","setTimeout","testConnection","api","get","Date","toLocaleString","fetchUsers","response","data","addUser","e","preventDefault","post","deleteUser","userId","delete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","includes","onSubmit","type","placeholder","value","onChange","target","required","length","map","user","_id","_c","$RefreshReg$"],"sources":["/Users/jayachandran/Downloads/newofile/frontend-1/src/App.js"],"sourcesContent":["// import React, { useState, useEffect, useCallback } from 'react';\n// import axios from 'axios';\n// import './App.css';\n\n// const API_TIMEOUT = 10000;\n// const MAX_RETRIES = 3;\n\n// function App() {\n//   const [name, setName] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [users, setUsers] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [connectionStatus, setConnectionStatus] = useState({\n//     isConnected: false,\n//     lastChecked: null\n//   });\n\n//   const createAxiosInstance = useCallback(() => {\n//     return axios.create({\n//       baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n//       timeout: API_TIMEOUT,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Accept': 'application/json'\n//       },\n//       withCredentials: true\n//     });\n//   }, []);\n\n//   const handleApiCall = useCallback(async (apiCall, errorMessage) => {\n//     let currentRetries = 0;\n//     while (currentRetries < MAX_RETRIES) {\n//       try {\n//         setIsLoading(true);\n//         const result = await apiCall();\n//         setMessage(result.message || 'Operation successful');\n//         setIsLoading(false);\n//         return result;\n//       } catch (error) {\n//         currentRetries++;\n//         console.error(`${errorMessage} (Attempt ${currentRetries}):`, error);\n//         if (currentRetries === MAX_RETRIES) {\n//           setMessage(`${errorMessage}. Please try again later.`);\n//           setIsLoading(false);\n//           throw error;\n//         }\n//         await new Promise(resolve => setTimeout(resolve, 1000 * currentRetries));\n//       }\n//     }\n//   }, []);\n\n//   const testConnection = useCallback(async () => {\n//     const api = createAxiosInstance();\n//     try {\n//       await api.get('/health');\n//       setConnectionStatus({\n//         isConnected: true,\n//         lastChecked: new Date().toLocaleString()\n//       });\n//       setMessage('Server connection established successfully');\n//     } catch (error) {\n//       setConnectionStatus({\n//         isConnected: false,\n//         lastChecked: new Date().toLocaleString()\n//       });\n//       setMessage('Failed to connect to server');\n//     }\n//   }, [createAxiosInstance]);\n\n//   const fetchUsers = useCallback(async () => {\n//     const api = createAxiosInstance();\n//     await handleApiCall(\n//       async () => {\n//         const response = await api.get('/users');\n//         setUsers(response.data.data || []);\n//         return response.data;\n//       },\n//       'Failed to fetch users'\n//     );\n//   }, [createAxiosInstance, handleApiCall]);\n\n//   const addUser = useCallback(async (e) => {\n//     e.preventDefault();\n//     const api = createAxiosInstance();\n//     await handleApiCall(\n//       async () => {\n//         const response = await api.post('/users', { name, email });\n//         setName('');\n//         setEmail('');\n//         await fetchUsers();\n//         return response.data;\n//       },\n//       'Failed to add user'\n//     );\n//   }, [createAxiosInstance, handleApiCall, fetchUsers, name, email]);\n\n//   const deleteUser = useCallback(async (userId) => {\n//     const api = createAxiosInstance();\n//     await handleApiCall(\n//       async () => {\n//         const response = await api.delete(`/users/${userId}`);\n//         await fetchUsers();\n//         return response.data;\n//       },\n//       'Failed to delete user'\n//     );\n//   }, [createAxiosInstance, handleApiCall, fetchUsers]);\n\n//   useEffect(() => {\n//     testConnection();\n//     fetchUsers();\n//   }, [testConnection, fetchUsers]);\n\n//   return (\n//     <div className=\"container\">\n//       <div className=\"form-wrapper\">\n//         <h1>User Management App</h1>\n        \n//         <div className={`connection-status ${connectionStatus.isConnected ? 'connected' : 'disconnected'}`}>\n//           Server Status: {connectionStatus.isConnected ? 'Connected' : 'Disconnected'}\n//           <small>Last checked: {connectionStatus.lastChecked || 'Never'}</small>\n//           <button onClick={testConnection} disabled={isLoading}>\n//             Recheck Connection\n//           </button>\n//         </div>\n\n//         {message && (\n//           <div className={`message ${message.includes('Failed') ? 'error' : 'success'}`}>\n//             {message}\n//           </div>\n//         )}\n\n//         <form onSubmit={addUser} className=\"user-form\">\n//           <input\n//             type=\"text\"\n//             placeholder=\"Name\"\n//             value={name}\n//             onChange={(e) => setName(e.target.value)}\n//             required\n//             disabled={!connectionStatus.isConnected || isLoading}\n//           />\n//           <input\n//             type=\"email\"\n//             placeholder=\"Email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             required\n//             disabled={!connectionStatus.isConnected || isLoading}\n//           />\n//           <button \n//             type=\"submit\" \n//             disabled={!connectionStatus.isConnected || isLoading}\n//           >\n//             {isLoading ? 'Processing...' : 'Add User'}\n//           </button>\n//         </form>\n\n//         {users.length > 0 && (\n//           <div className=\"users-list\">\n//             <h2>Users ({users.length})</h2>\n//             <ul>\n//               {users.map(user => (\n//                 <li key={user._id}>\n//                   <div>\n//                     <strong>{user.name}</strong>\n//                     <span>{user.email}</span>\n//                   </div>\n//                   <button\n//                     onClick={() => deleteUser(user._id)}\n//                     disabled={isLoading}\n//                   >\n//                     Delete\n//                   </button>\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nconst API_TIMEOUT = 10000;\nconst MAX_RETRIES = 3;\n\nfunction App() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [message, setMessage] = useState('');\n  const [users, setUsers] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState({\n    isConnected: false,\n    lastChecked: null\n  });\n\n  const createAxiosInstance = useCallback(() => {\n    return axios.create({\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n      timeout: API_TIMEOUT,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      withCredentials: true\n    });\n  }, []);\n\n  const handleApiCall = useCallback(async (apiCall, errorMessage) => {\n    const performApiCall = async (retriesLeft) => {\n      try {\n        setIsLoading(true);\n        const result = await apiCall();\n        setMessage(result.message || 'Operation successful');\n        setIsLoading(false);\n        return result;\n      } catch (error) {\n        if (retriesLeft === 1) {\n          setMessage(`${errorMessage}. Please try again later.`);\n          setIsLoading(false);\n          throw error;\n        }\n        console.error(`${errorMessage} (Attempt ${MAX_RETRIES - retriesLeft + 1}):`, error);\n        await new Promise(resolve => setTimeout(resolve, 1000 * (MAX_RETRIES - retriesLeft + 1)));\n        return performApiCall(retriesLeft - 1);\n      }\n    };\n\n    return performApiCall(MAX_RETRIES);\n  }, []);\n\n  const testConnection = useCallback(async () => {\n    const api = createAxiosInstance();\n    try {\n      await api.get('/health');\n      setConnectionStatus({\n        isConnected: true,\n        lastChecked: new Date().toLocaleString()\n      });\n      setMessage('Server connection established successfully');\n    } catch (error) {\n      setConnectionStatus({\n        isConnected: false,\n        lastChecked: new Date().toLocaleString()\n      });\n      setMessage('Failed to connect to server');\n    }\n  }, [createAxiosInstance]);\n\n  const fetchUsers = useCallback(async () => {\n    const api = createAxiosInstance();\n    await handleApiCall(\n      async () => {\n        const response = await api.get('/users');\n        setUsers(response.data.data || []);\n        return response.data;\n      },\n      'Failed to fetch users'\n    );\n  }, [createAxiosInstance, handleApiCall]);\n\n  const addUser = useCallback(async (e) => {\n    e.preventDefault();\n    const api = createAxiosInstance();\n    await handleApiCall(\n      async () => {\n        const response = await api.post('/users', { name, email });\n        setName('');\n        setEmail('');\n        await fetchUsers();\n        return response.data;\n      },\n      'Failed to add user'\n    );\n  }, [createAxiosInstance, handleApiCall, fetchUsers, name, email]);\n\n  const deleteUser = useCallback(async (userId) => {\n    const api = createAxiosInstance();\n    await handleApiCall(\n      async () => {\n        const response = await api.delete(`/users/${userId}`);\n        await fetchUsers();\n        return response.data;\n      },\n      'Failed to delete user'\n    );\n  }, [createAxiosInstance, handleApiCall, fetchUsers]);\n\n  useEffect(() => {\n    testConnection();\n    fetchUsers();\n  }, [testConnection, fetchUsers]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"form-wrapper\">\n        <h1>User Management App</h1>\n        \n        <div className={`connection-status ${connectionStatus.isConnected ? 'connected' : 'disconnected'}`}>\n          Server Status: {connectionStatus.isConnected ? 'Connected' : 'Disconnected'}\n          <small>Last checked: {connectionStatus.lastChecked || 'Never'}</small>\n          <button onClick={testConnection} disabled={isLoading}>\n            Recheck Connection\n          </button>\n        </div>\n\n        {message && (\n          <div className={`message ${message.includes('Failed') ? 'error' : 'success'}`}>\n            {message}\n          </div>\n        )}\n\n        <form onSubmit={addUser} className=\"user-form\">\n          <input\n            type=\"text\"\n            placeholder=\"Name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            required\n            disabled={!connectionStatus.isConnected || isLoading}\n          />\n          <input\n            type=\"email\"\n            placeholder=\"Email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n            disabled={!connectionStatus.isConnected || isLoading}\n          />\n          <button \n            type=\"submit\" \n            disabled={!connectionStatus.isConnected || isLoading}\n          >\n            {isLoading ? 'Processing...' : 'Add User'}\n          </button>\n        </form>\n\n        {users.length > 0 && (\n          <div className=\"users-list\">\n            <h2>Users ({users.length})</h2>\n            <ul>\n              {users.map(user => (\n                <li key={user._id}>\n                  <div>\n                    <strong>{user.name}</strong>\n                    <span>{user.email}</span>\n                  </div>\n                  <button\n                    onClick={() => deleteUser(user._id)}\n                    disabled={isLoading}\n                  >\n                    Delete\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,WAAW,GAAG,KAAK;AACzB,MAAMC,WAAW,GAAG,CAAC;AAErB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}