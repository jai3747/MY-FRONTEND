
# # # # # # # # # name: Security & Build Pipeline

# # # # # # # # # on:
# # # # # # # # #   workflow_dispatch:
# # # # # # # # #     inputs:
# # # # # # # # #       build_new_images:
# # # # # # # # #         description: 'Build new Docker images?'
# # # # # # # # #         required: true
# # # # # # # # #         type: boolean
# # # # # # # # #         default: true
# # # # # # # # #       frontend_image_tag:
# # # # # # # # #         description: 'Frontend image tag to use (if not building new)'
# # # # # # # # #         required: false
# # # # # # # # #         type: string
# # # # # # # # #         default: 'v20'
# # # # # # # # #       backend_image_tag:
# # # # # # # # #         description: 'Backend image tag to use (if not building new)'
# # # # # # # # #         required: false
# # # # # # # # #         type: string
# # # # # # # # #         default: 'v20'
# # # # # # # # #   push:
# # # # # # # # #     branches: [main]
# # # # # # # # #   pull_request:
# # # # # # # # #     branches: [main]

# # # # # # # # # env:
# # # # # # # # #   NODE_OPTIONS: --openssl-legacy-provider
# # # # # # # # #   REGISTRY: docker.io
# # # # # # # # #   FRONTEND_IMAGE: jai3747/my-frontend-app
# # # # # # # # #   BACKEND_IMAGE: jai3747/my-backend-app
# # # # # # # # #   FRONTEND_NEW_TAG: v20
# # # # # # # # #   BACKEND_NEW_TAG: v20

# # # # # # # # # jobs:
# # # # # # # # #   frontend-security:
# # # # # # # # #     runs-on: ubuntu-latest
# # # # # # # # #     steps:
# # # # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # # # #         with:
# # # # # # # # #           repository: jai3747/MY-FRONTEND
# # # # # # # # #       - uses: actions/setup-node@v4.0.2
# # # # # # # # #         with:
# # # # # # # # #           node-version: '18'
# # # # # # # # #           cache: 'npm'
      
# # # # # # # # #       - name: SAC (Snyk) Scan
# # # # # # # # #         run: |
# # # # # # # # #           npm install
# # # # # # # # #           npm install -g snyk
# # # # # # # # #           snyk test --json > frontend-sac.json || true
# # # # # # # # #           echo "### Frontend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           jq -r '.vulnerabilities[] | "- " + .title + " (Severity: " + .severity + ")"' frontend-sac.json >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found"
# # # # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #         env:
# # # # # # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # # # # # # #       - name: Frontend TruffleHog
# # # # # # # # #         run: |
# # # # # # # # #           docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest \
# # # # # # # # #             filesystem /pwd --json > frontend-secrets.json || true
# # # # # # # # #           echo "### Frontend Secrets Found" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           jq -r '.[] | "- Found in: " + .file + " (Type: " + .type + ")"' frontend-secrets.json >> $GITHUB_STEP_SUMMARY || echo "No secrets found"
# # # # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

# # # # # # # # #   backend-security:
# # # # # # # # #     runs-on: ubuntu-latest
# # # # # # # # #     steps:
# # # # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # # # #         with:
# # # # # # # # #           repository: jai3747/MY-BACKEND
# # # # # # # # #       - uses: actions/setup-node@v4.0.2
# # # # # # # # #         with:
# # # # # # # # #           node-version: '18'
# # # # # # # # #           cache: 'npm'
      
# # # # # # # # #       - name: SAC (Snyk) Scan
# # # # # # # # #         run: |
# # # # # # # # #           npm install
# # # # # # # # #           npm install -g snyk
# # # # # # # # #           snyk test --json > backend-sac.json || true
# # # # # # # # #           echo "### Backend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           jq -r '.vulnerabilities[] | "- " + .title + " (Severity: " + .severity + ")"' backend-sac.json >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found"
# # # # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #         env:
# # # # # # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # # # # # # #       - name: Backend TruffleHog
# # # # # # # # #         run: |
# # # # # # # # #           docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest \
# # # # # # # # #             filesystem /pwd --json > backend-secrets.json || true
# # # # # # # # #           echo "### Backend Secrets Found" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           jq -r '.[] | "- Found in: " + .file + " (Type: " + .type + ")"' backend-secrets.json >> $GITHUB_STEP_SUMMARY || echo "No secrets found"
# # # # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

# # # # # # # # #   frontend-build:
# # # # # # # # #     needs: frontend-security
# # # # # # # # #     runs-on: ubuntu-latest
# # # # # # # # #     steps:
# # # # # # # # #       - name: Set Image Tag
# # # # # # # # #         run: |
# # # # # # # # #           if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
# # # # # # # # #             if [[ "${{ github.event.inputs.build_new_images }}" == "true" ]]; then
# # # # # # # # #               echo "IMAGE_TAG=${{ env.FRONTEND_NEW_TAG }}" >> $GITHUB_ENV
# # # # # # # # #               echo "BUILD_IMAGE=true" >> $GITHUB_ENV
# # # # # # # # #             else
# # # # # # # # #               echo "IMAGE_TAG=${{ github.event.inputs.frontend_image_tag }}" >> $GITHUB_ENV
# # # # # # # # #               echo "BUILD_IMAGE=false" >> $GITHUB_ENV
# # # # # # # # #             fi
# # # # # # # # #           else
# # # # # # # # #             echo "IMAGE_TAG=${{ env.FRONTEND_NEW_TAG }}" >> $GITHUB_ENV
# # # # # # # # #             echo "BUILD_IMAGE=true" >> $GITHUB_ENV
# # # # # # # # #           fi

# # # # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # # # #         if: env.BUILD_IMAGE == 'true'
# # # # # # # # #         with:
# # # # # # # # #           repository: jai3747/MY-FRONTEND

# # # # # # # # #       - uses: actions/setup-node@v4.0.2
# # # # # # # # #         if: env.BUILD_IMAGE == 'true'
# # # # # # # # #         with:
# # # # # # # # #           node-version: '18'
# # # # # # # # #           cache: 'npm'

# # # # # # # # #       - name: Update Dependencies
# # # # # # # # #         if: env.BUILD_IMAGE == 'true'
# # # # # # # # #         run: |
# # # # # # # # #           npm install nth-check@2.0.1 semver@7.5.2 --save-dev
# # # # # # # # #           npm install react@18 react-dom@18 react-scripts@5.0.1 --save

# # # # # # # # #       - name: Build Frontend
# # # # # # # # #         if: env.BUILD_IMAGE == 'true'
# # # # # # # # #         run: |
# # # # # # # # #           npm install
# # # # # # # # #           if ! grep -q '"build"' package.json; then
# # # # # # # # #             npm pkg set scripts.build="react-scripts build"
# # # # # # # # #           fi
# # # # # # # # #           npm run build
# # # # # # # # #         env:
# # # # # # # # #           CI: false
      
# # # # # # # # #       - name: Build and Push Docker Image
# # # # # # # # #         if: env.BUILD_IMAGE == 'true'
# # # # # # # # #         run: |
# # # # # # # # #           docker build -t ${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }} .
          
# # # # # # # # #           echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
# # # # # # # # #           docker push ${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}

# # # # # # # # #       - name: Run Trivy vulnerability scanner
# # # # # # # # #         uses: aquasecurity/trivy-action@master
# # # # # # # # #         with:
# # # # # # # # #           image-ref: ${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}
# # # # # # # # #           format: 'table'
# # # # # # # # #           exit-code: '0'
# # # # # # # # #           ignore-unfixed: true
# # # # # # # # #           vuln-type: 'os,library'
# # # # # # # # #           severity: 'CRITICAL,HIGH'

# # # # # # # # #   backend-build:
# # # # # # # # #     needs: backend-security
# # # # # # # # #     runs-on: ubuntu-latest
# # # # # # # # #     steps:
# # # # # # # # #       - name: Set Image Tag
# # # # # # # # #         run: |
# # # # # # # # #           if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
# # # # # # # # #             if [[ "${{ github.event.inputs.build_new_images }}" == "true" ]]; then
# # # # # # # # #               echo "IMAGE_TAG=${{ env.BACKEND_NEW_TAG }}" >> $GITHUB_ENV
# # # # # # # # #               echo "BUILD_IMAGE=true" >> $GITHUB_ENV
# # # # # # # # #             else
# # # # # # # # #               echo "IMAGE_TAG=${{ github.event.inputs.backend_image_tag }}" >> $GITHUB_ENV
# # # # # # # # #               echo "BUILD_IMAGE=false" >> $GITHUB_ENV
# # # # # # # # #             fi
# # # # # # # # #           else
# # # # # # # # #             echo "IMAGE_TAG=${{ env.BACKEND_NEW_TAG }}" >> $GITHUB_ENV
# # # # # # # # #             echo "BUILD_IMAGE=true" >> $GITHUB_ENV
# # # # # # # # #           fi

# # # # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # # # #         if: env.BUILD_IMAGE == 'true'
# # # # # # # # #         with:
# # # # # # # # #           repository: jai3747/MY-BACKEND

# # # # # # # # #       - uses: actions/setup-node@v4.0.2
# # # # # # # # #         if: env.BUILD_IMAGE == 'true'
# # # # # # # # #         with:
# # # # # # # # #           node-version: '18'
# # # # # # # # #           cache: 'npm'

# # # # # # # # #       - name: Build Backend
# # # # # # # # #         if: env.BUILD_IMAGE == 'true'
# # # # # # # # #         run: |
# # # # # # # # #           npm install
# # # # # # # # #           npm run build

# # # # # # # # #       - name: Build and Push Docker Image
# # # # # # # # #         if: env.BUILD_IMAGE == 'true'
# # # # # # # # #         run: |
# # # # # # # # #           docker build -t ${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }} .
          
# # # # # # # # #           echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
# # # # # # # # #           docker push ${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}

# # # # # # # # #       - name: Run Trivy vulnerability scanner
# # # # # # # # #         uses: aquasecurity/trivy-action@master
# # # # # # # # #         with:
# # # # # # # # #           image-ref: ${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}
# # # # # # # # #           format: 'table'
# # # # # # # # #           exit-code: '0'
# # # # # # # # #           ignore-unfixed: true
# # # # # # # # #           vuln-type: 'os,library'
# # # # # # # # #           severity: 'CRITICAL,HIGH'

# # # # # # # # #   report:
# # # # # # # # #     needs: [frontend-security, backend-security, frontend-build, backend-build]
# # # # # # # # #     runs-on: ubuntu-latest
# # # # # # # # #     if: always()
# # # # # # # # #     steps:
# # # # # # # # #       - name: Generate Final Report
# # # # # # # # #         run: |
# # # # # # # # #           echo "# Pipeline Security Report" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           echo "## Build Status" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           echo "- Frontend Build (v9): ${{ needs.frontend-build.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           echo "- Backend Build (v7): ${{ needs.backend-build.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           echo "## Security Summary" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           echo "### Frontend" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           echo "- Security Scan Status: ${{ needs.frontend-security.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           echo "### Backend" >> $GITHUB_STEP_SUMMARY
# # # # # # # # #           echo "- Security Scan Status: ${{ needs.backend-security.result }}" >> $GITHUB_STEP_SUMMARY

# # # # # # # # # permissions:
# # # # # # # # #   contents: read
# # # # # # # # #   security-events: write
# # # # # # # # name: Security, Build & Deploy Pipeline

# # # # # # # # on:
# # # # # # # #   workflow_dispatch:
# # # # # # # #   push:
# # # # # # # #     branches: [main]
# # # # # # # #   pull_request:
# # # # # # # #     branches: [main]

# # # # # # # # env:
# # # # # # # #   NODE_OPTIONS: --openssl-legacy-provider
# # # # # # # #   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
# # # # # # # #   GKE_CLUSTER: cluster-1    # Replace with your cluster name
# # # # # # # #   GKE_ZONE: asia-south1-a    # Replace with your cluster zone

# # # # # # # # jobs:
# # # # # # # #   frontend-security:
# # # # # # # #     runs-on: ubuntu-latest
# # # # # # # #     steps:
# # # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # # #         with:
# # # # # # # #           repository: jai3747/MY-FRONTEND
# # # # # # # #       - uses: actions/setup-node@v4.0.2
# # # # # # # #         with:
# # # # # # # #           node-version: '18'
# # # # # # # #           cache: 'npm'
      
# # # # # # # #       - name: SAC (Snyk) Scan
# # # # # # # #         run: |
# # # # # # # #           npm install
# # # # # # # #           npm install -g snyk
# # # # # # # #           snyk test --json > frontend-sac.json || true
# # # # # # # #           echo "### Frontend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
# # # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # # #           jq -r '.vulnerabilities[] | "- " + .title + " (Severity: " + .severity + ")"' frontend-sac.json >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found"
# # # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # # #         env:
# # # # # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # # # # # #       - name: Semgrep Scan
# # # # # # # #         uses: semgrep/semgrep-action@v1
# # # # # # # #         with:
# # # # # # # #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# # # # # # # #           publishDeployment: 1
# # # # # # # #           generateSarif: 1

# # # # # # # #   backend-security:
# # # # # # # #     runs-on: ubuntu-latest
# # # # # # # #     steps:
# # # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # # #         with:
# # # # # # # #           repository: jai3747/MY-BACKEND
# # # # # # # #       - uses: actions/setup-node@v4.0.2
# # # # # # # #         with:
# # # # # # # #           node-version: '18'
# # # # # # # #           cache: 'npm'
      
# # # # # # # #       - name: SAC (Snyk) Scan
# # # # # # # #         run: |
# # # # # # # #           npm install
# # # # # # # #           npm install -g snyk
# # # # # # # #           snyk test --json > backend-sac.json || true
# # # # # # # #           echo "### Backend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
# # # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # # #           jq -r '.vulnerabilities[] | "- " + .title + " (Severity: " + .severity + ")"' backend-sac.json >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found"
# # # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # # #         env:
# # # # # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # # # # # #       - name: Semgrep Scan
# # # # # # # #         uses: semgrep/semgrep-action@v1
# # # # # # # #         with:
# # # # # # # #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# # # # # # # #           publishDeployment: 1
# # # # # # # #           generateSarif: 1

# # # # # # # #   frontend-build-push:
# # # # # # # #     needs: frontend-security
# # # # # # # #     runs-on: ubuntu-latest
# # # # # # # #     steps:
# # # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # # #         with:
# # # # # # # #           repository: jai3747/MY-FRONTEND
      
# # # # # # # #       - name: Login to DockerHub
# # # # # # # #         uses: docker/login-action@v3
# # # # # # # #         with:
# # # # # # # #           username: ${{ secrets.DOCKERHUB_USERNAME }}
# # # # # # # #           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
# # # # # # # #       - name: Build and Push Frontend
# # # # # # # #         run: |
# # # # # # # #           docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:$GITHUB_SHA .
# # # # # # # #           docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:$GITHUB_SHA
# # # # # # # #           docker tag ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:$GITHUB_SHA ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:latest
# # # # # # # #           docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:latest

# # # # # # # #   backend-build-push:
# # # # # # # #     needs: backend-security
# # # # # # # #     runs-on: ubuntu-latest
# # # # # # # #     steps:
# # # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # # #         with:
# # # # # # # #           repository: jai3747/MY-BACKEND
      
# # # # # # # #       - name: Login to DockerHub
# # # # # # # #         uses: docker/login-action@v3
# # # # # # # #         with:
# # # # # # # #           username: ${{ secrets.DOCKERHUB_USERNAME }}
# # # # # # # #           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
# # # # # # # #       - name: Build and Push Backend
# # # # # # # #         run: |
# # # # # # # #           docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:$GITHUB_SHA .
# # # # # # # #           docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:$GITHUB_SHA
# # # # # # # #           docker tag ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:$GITHUB_SHA ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:latest
# # # # # # # #           docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:latest

# # # # # # # #   deploy:
# # # # # # # #     needs: [frontend-build-push, backend-build-push]
# # # # # # # #     runs-on: ubuntu-latest
# # # # # # # #     steps:
# # # # # # # #       - name: Checkout
# # # # # # # #         uses: actions/checkout@v4.1.1
      
# # # # # # # #       # Setup gcloud CLI for GKE authentication
# # # # # # # #       - name: Set up Cloud SDK
# # # # # # # #         uses: google-github-actions/setup-gcloud@v1
# # # # # # # #         with:
# # # # # # # #           version: '>= 363.0.0'
# # # # # # # #           project_id: ${{ secrets.GCP_PROJECT_ID }}
# # # # # # # #           service_account_key: ${{ secrets.GCP_SA_KEY }}
      
# # # # # # # #       # Get GKE credentials
# # # # # # # #       - name: Get GKE Credentials
# # # # # # # #         run: |
# # # # # # # #           gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}
      
# # # # # # # #       - name: Deploy to GKE
# # # # # # # #         run: |
# # # # # # # #           # Update image tags in deployment files
# # # # # # # #           sed -i "s|\${DOCKER_USERNAME}|${{ secrets.DOCKERHUB_USERNAME }}|g" DEPLOYEMENT/K8/k8.yaml
          
# # # # # # # #           # Apply the configurations
# # # # # # # #           kubectl apply -f DEPLOYEMENT/K8/k8.yaml
          
# # # # # # # #           # Wait for deployments to be ready
# # # # # # # #           kubectl rollout status deployment/frontend-deployment
# # # # # # # #           kubectl rollout status deployment/backend-deployment

# # # # # # # #   report:
# # # # # # # #     needs: [frontend-security, backend-security, frontend-build-push, backend-build-push, deploy]
# # # # # # # #     runs-on: ubuntu-latest
# # # # # # # #     if: always()
# # # # # # # #     steps:
# # # # # # # #       - name: Generate Final Report
# # # # # # # #         run: |
# # # # # # # #           echo "# Pipeline Security Report" >> $GITHUB_STEP_SUMMARY
# # # # # # # #           echo "## Build & Deploy Status" >> $GITHUB_STEP_SUMMARY
# # # # # # # #           echo "- Frontend Build: ${{ needs.frontend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # # # #           echo "- Backend Build: ${{ needs.backend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # # # #           echo "- Deployment: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # # # #           echo "## Security Summary" >> $GITHUB_STEP_SUMMARY
# # # # # # # #           echo "### Frontend" >> $GITHUB_STEP_SUMMARY
# # # # # # # #           echo "- Security Scan Status: ${{ needs.frontend-security.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # # # #           echo "### Backend" >> $GITHUB_STEP_SUMMARY
# # # # # # # #           echo "- Security Scan Status: ${{ needs.backend-security.result }}" >> $GITHUB_STEP_SUMMARY

# # # # # # # # permissions:
# # # # # # # #   contents: read
# # # # # # # #   security-events: write
# # # # # # # #   id-token: write
# # # # # # # name: Security, Build & Deploy Pipeline

# # # # # # # on:
# # # # # # #   workflow_dispatch:
# # # # # # #   push:
# # # # # # #     branches: [main]
# # # # # # #   pull_request:
# # # # # # #     branches: [main]

# # # # # # # env:
# # # # # # #   NODE_OPTIONS: --openssl-legacy-provider
# # # # # # #   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
# # # # # # #   GKE_CLUSTER: cluster-1    # Replace with your cluster name
# # # # # # #   GKE_ZONE: asia-south1-a   cluster-1          # Replace with your cluster zone

# # # # # # # jobs:
# # # # # # #   frontend-security:
# # # # # # #     runs-on: ubuntu-latest
# # # # # # #     steps:
# # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # #         with:
# # # # # # #           repository: jai3747/MY-FRONTEND
# # # # # # #       - uses: actions/setup-node@v4.0.2
# # # # # # #         with:
# # # # # # #           node-version: '18'
# # # # # # #           cache: 'npm'
      
# # # # # # #       # Update package-lock.json before security scans
# # # # # # #       - name: Update Dependencies
# # # # # # #         run: |
# # # # # # #           npm install
# # # # # # #           git config --global user.email "github-actions@github.com"
# # # # # # #           git config --global user.name "GitHub Actions"
# # # # # # #           git add package-lock.json
# # # # # # #           git commit -m "Update package-lock.json" || echo "No changes to commit"
      
# # # # # # #       - name: SAC (Snyk) Scan
# # # # # # #         run: |
# # # # # # #           npm install -g snyk
# # # # # # #           snyk test --json > frontend-sac.json || true
# # # # # # #           echo "### Frontend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # #           jq -r '.vulnerabilities[] | "- " + .title + " (Severity: " + .severity + ")"' frontend-sac.json >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found"
# # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # #         env:
# # # # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # # # # #       - name: Semgrep Scan
# # # # # # #         uses: semgrep/semgrep-action@v1
# # # # # # #         with:
# # # # # # #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# # # # # # #           publishDeployment: 1
# # # # # # #           generateSarif: 1

# # # # # # #   backend-security:
# # # # # # #     runs-on: ubuntu-latest
# # # # # # #     steps:
# # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # #         with:
# # # # # # #           repository: jai3747/MY-BACKEND
# # # # # # #       - uses: actions/setup-node@v4.0.2
# # # # # # #         with:
# # # # # # #           node-version: '18'
# # # # # # #           cache: 'npm'
      
# # # # # # #       # Update package-lock.json before security scans
# # # # # # #       - name: Update Dependencies
# # # # # # #         run: |
# # # # # # #           npm install
# # # # # # #           git config --global user.email "github-actions@github.com"
# # # # # # #           git config --global user.name "GitHub Actions"
# # # # # # #           git add package-lock.json
# # # # # # #           git commit -m "Update package-lock.json" || echo "No changes to commit"
      
# # # # # # #       - name: SAC (Snyk) Scan
# # # # # # #         run: |
# # # # # # #           npm install -g snyk
# # # # # # #           snyk test --json > backend-sac.json || true
# # # # # # #           echo "### Backend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # #           jq -r '.vulnerabilities[] | "- " + .title + " (Severity: " + .severity + ")"' backend-sac.json >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found"
# # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # #         env:
# # # # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # # # # #       - name: Semgrep Scan
# # # # # # #         uses: semgrep/semgrep-action@v1
# # # # # # #         with:
# # # # # # #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# # # # # # #           publishDeployment: 1
# # # # # # #           generateSarif: 1

# # # # # # #   frontend-build-push:
# # # # # # #     needs: frontend-security
# # # # # # #     runs-on: ubuntu-latest
# # # # # # #     steps:
# # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # #         with:
# # # # # # #           repository: jai3747/MY-FRONTEND
      
# # # # # # #       # Set up BuildKit Docker builder
# # # # # # #       - name: Set up Docker Buildx
# # # # # # #         uses: docker/setup-buildx-action@v3
      
# # # # # # #       - name: Login to DockerHub
# # # # # # #         uses: docker/login-action@v3
# # # # # # #         with:
# # # # # # #           username: ${{ secrets.DOCKERHUB_USERNAME }}
# # # # # # #           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
# # # # # # #       - name: Build and Push Frontend
# # # # # # #         uses: docker/build-push-action@v5
# # # # # # #         with:
# # # # # # #           context: .
# # # # # # #           push: true
# # # # # # #           tags: |
# # # # # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}
# # # # # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:latest
# # # # # # #           cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:buildcache
# # # # # # #           cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:buildcache,mode=max

# # # # # # #   backend-build-push:
# # # # # # #     needs: backend-security
# # # # # # #     runs-on: ubuntu-latest
# # # # # # #     steps:
# # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # #         with:
# # # # # # #           repository: jai3747/MY-BACKEND
      
# # # # # # #       # Set up BuildKit Docker builder
# # # # # # #       - name: Set up Docker Buildx
# # # # # # #         uses: docker/setup-buildx-action@v3
      
# # # # # # #       - name: Login to DockerHub
# # # # # # #         uses: docker/login-action@v3
# # # # # # #         with:
# # # # # # #           username: ${{ secrets.DOCKERHUB_USERNAME }}
# # # # # # #           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
# # # # # # #       - name: Build and Push Backend
# # # # # # #         uses: docker/build-push-action@v5
# # # # # # #         with:
# # # # # # #           context: .
# # # # # # #           push: true
# # # # # # #           tags: |
# # # # # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}
# # # # # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:latest
# # # # # # #           cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-backend:buildcache
# # # # # # #           cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-backend:buildcache,mode=max

# # # # # # #   deploy:
# # # # # # #     needs: [frontend-build-push, backend-build-push]
# # # # # # #     runs-on: ubuntu-latest
# # # # # # #     environment: production
# # # # # # #     steps:
# # # # # # #       - name: Checkout
# # # # # # #         uses: actions/checkout@v4.1.1
      
# # # # # # #       - name: Set up Cloud SDK
# # # # # # #         uses: google-github-actions/setup-gcloud@v1
# # # # # # #         with:
# # # # # # #           version: '>= 363.0.0'
# # # # # # #           project_id: ${{ secrets.GCP_PROJECT_ID }}
# # # # # # #           service_account_key: ${{ secrets.GCP_SA_KEY }}
      
# # # # # # #       - name: Get GKE Credentials
# # # # # # #         run: |
# # # # # # #           gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}
      
# # # # # # #       - name: Deploy to GKE
# # # # # # #         run: |
# # # # # # #           # Update image tags in deployment files
# # # # # # #           sed -i "s|\${DOCKER_USERNAME}|${{ secrets.DOCKERHUB_USERNAME }}|g" DEPLOYEMENT/K8/k8.yaml
# # # # # # #           sed -i "s|latest|${{ github.sha }}|g" DEPLOYEMENT/K8/k8.yaml
          
# # # # # # #           # Apply the configurations
# # # # # # #           kubectl apply -f DEPLOYEMENT/K8/k8.yaml
          
# # # # # # #           # Wait for deployments to be ready
# # # # # # #           kubectl rollout status deployment/frontend-deployment
# # # # # # #           kubectl rollout status deployment/backend-deployment

# # # # # # #   report:
# # # # # # #     needs: [frontend-security, backend-security, frontend-build-push, backend-build-push, deploy]
# # # # # # #     runs-on: ubuntu-latest
# # # # # # #     if: always()
# # # # # # #     steps:
# # # # # # #       - name: Generate Final Report
# # # # # # #         run: |
# # # # # # #           echo "# Pipeline Security Report" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "## Build & Deploy Status" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "- Frontend Build: ${{ needs.frontend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "- Backend Build: ${{ needs.backend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "- Deployment: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "## Security Summary" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "### Frontend" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "- Security Scan Status: ${{ needs.frontend-security.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "### Backend" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "- Security Scan Status: ${{ needs.backend-security.result }}" >> $GITHUB_STEP_SUMMARY

# # # # # # # permissions:
# # # # # # #   contents: read
# # # # # # #   security-events: write
# # # # # # #   id-token: write
# # # # # # name: Security, Build & Deploy Pipeline

# # # # # # on:
# # # # # #   workflow_dispatch:
# # # # # #   push:
# # # # # #     branches: [main]
# # # # # #   pull_request:
# # # # # #     branches: [main]

# # # # # # env:
# # # # # #   NODE_OPTIONS: --openssl-legacy-provider
# # # # # #   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
# # # # # #   GKE_CLUSTER: cluster-1     # Replace with your cluster name
# # # # # #   GKE_ZONE: asia-south1-a                # Replace with your cluster zone

# # # # # # jobs:
# # # # # #   frontend-security:
# # # # # #     runs-on: ubuntu-latest
# # # # # #     steps:
# # # # # #       - uses: actions/checkout@v4.1.1
# # # # # #         with:
# # # # # #           repository: jai3747/MY-FRONTEND
# # # # # #       - uses: actions/setup-node@v4.0.2
# # # # # #         with:
# # # # # #           node-version: '18'
# # # # # #           cache: 'npm'
      
# # # # # #       - name: Update Dependencies
# # # # # #         run: |
# # # # # #           npm install
# # # # # #           git config --global user.email "mjai3747@gmail.com"
# # # # # #           git config --global user.name "jai3747"
# # # # # #           git add package-lock.json
# # # # # #           git commit -m "Update package-lock.json" || echo "No changes to commit"
      
# # # # # #       - name: Run Snyk Scan
# # # # # #         run: |
# # # # # #           npm install -g snyk
# # # # # #           snyk test --json > frontend-sac.json || true
# # # # # #           echo "### Frontend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
# # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # #           jq -r '.vulnerabilities[] | "- " + .title + " (Severity: " + .severity + ")"' frontend-sac.json >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found"
# # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # #         env:
# # # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # # # #       - name: Run Semgrep Scan
# # # # # #         uses: semgrep/semgrep-action@v1
# # # # # #         with:
# # # # # #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# # # # # #           publishDeployment: 1
# # # # # #           generateSarif: 1

# # # # # #   backend-security:
# # # # # #     runs-on: ubuntu-latest
# # # # # #     steps:
# # # # # #       - uses: actions/checkout@v4.1.1
# # # # # #         with:
# # # # # #           repository: jai3747/MY-BACKEND
# # # # # #       - uses: actions/setup-node@v4.0.2
# # # # # #         with:
# # # # # #           node-version: '18'
# # # # # #           cache: 'npm'
      
# # # # # #       - name: Update Dependencies
# # # # # #         run: |
# # # # # #           npm install
# # # # # #           git config --global user.email "mjai3747@gmail.com"
# # # # # #           git config --global user.name "jai3747"
# # # # # #           git add package-lock.json
# # # # # #           git commit -m "Update package-lock.json" || echo "No changes to commit"
      
# # # # # #       - name: Run Snyk Scan
# # # # # #         run: |
# # # # # #           npm install -g snyk
# # # # # #           snyk test --json > backend-sac.json || true
# # # # # #           echo "### Backend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
# # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # #           jq -r '.vulnerabilities[] | "- " + .title + " (Severity: " + .severity + ")"' backend-sac.json >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found"
# # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # #         env:
# # # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # # # #       - name: Run Semgrep Scan
# # # # # #         uses: semgrep/semgrep-action@v1
# # # # # #         with:
# # # # # #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# # # # # #           publishDeployment: 1
# # # # # #           generateSarif: 1

# # # # # #   frontend-build-push:
# # # # # #     needs: frontend-security
# # # # # #     runs-on: ubuntu-latest
# # # # # #     steps:
# # # # # #       - uses: actions/checkout@v4.1.1
# # # # # #         with:
# # # # # #           repository: jai3747/MY-FRONTEND
      
# # # # # #       - name: Set up Docker Buildx
# # # # # #         uses: docker/setup-buildx-action@v3
      
# # # # # #       - name: Login to DockerHub
# # # # # #         uses: docker/login-action@v3
# # # # # #         with:
# # # # # #           username: ${{ secrets.DOCKERHUB_USERNAME }}
# # # # # #           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
# # # # # #       - name: Run Trivy vulnerability scanner
# # # # # #         uses: aquasecurity/trivy-action@master
# # # # # #         with:
# # # # # #           image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}'
# # # # # #           format: 'sarif'
# # # # # #           output: 'trivy-results.sarif'
# # # # # #           severity: 'CRITICAL,HIGH'
      
# # # # # #       - name: Build and Push Frontend
# # # # # #         uses: docker/build-push-action@v5
# # # # # #         with:
# # # # # #           context: .
# # # # # #           push: true
# # # # # #           tags: |
# # # # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}
# # # # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:latest
# # # # # #           cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:buildcache
# # # # # #           cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:buildcache,mode=max

# # # # # #   backend-build-push:
# # # # # #     needs: backend-security
# # # # # #     runs-on: ubuntu-latest
# # # # # #     steps:
# # # # # #       - uses: actions/checkout@v4.1.1
# # # # # #         with:
# # # # # #           repository: jai3747/MY-BACKEND
      
# # # # # #       - name: Set up Docker Buildx
# # # # # #         uses: docker/setup-buildx-action@v3
      
# # # # # #       - name: Login to DockerHub
# # # # # #         uses: docker/login-action@v3
# # # # # #         with:
# # # # # #           username: ${{ secrets.DOCKERHUB_USERNAME }}
# # # # # #           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
# # # # # #       - name: Run Trivy vulnerability scanner
# # # # # #         uses: aquasecurity/trivy-action@master
# # # # # #         with:
# # # # # #           image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}'
# # # # # #           format: 'sarif'
# # # # # #           output: 'trivy-results.sarif'
# # # # # #           severity: 'CRITICAL,HIGH'
      
# # # # # #       - name: Build and Push Backend
# # # # # #         uses: docker/build-push-action@v5
# # # # # #         with:
# # # # # #           context: .
# # # # # #           push: true
# # # # # #           tags: |
# # # # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}
# # # # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:latest
# # # # # #           cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-backend:buildcache
# # # # # #           cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-backend:buildcache,mode=max

# # # # # #   deploy:
# # # # # #     needs: [frontend-build-push, backend-build-push]
# # # # # #     runs-on: ubuntu-latest
# # # # # #     environment: production
# # # # # #     steps:
# # # # # #       - name: Checkout
# # # # # #         uses: actions/checkout@v4.1.1
      
# # # # # #       - name: Set up Cloud SDK
# # # # # #         uses: google-github-actions/setup-gcloud@v1
# # # # # #         with:
# # # # # #           version: '>= 363.0.0'
# # # # # #           project_id: ${{ secrets.GCP_PROJECT_ID }}
# # # # # #           service_account_key: ${{ secrets.GCP_SA_KEY }}
      
# # # # # #       - name: Get GKE Credentials
# # # # # #         run: |
# # # # # #           gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}
      
# # # # # #       - name: Deploy to GKE
# # # # # #         run: |
# # # # # #           # Create MongoDB credentials secret
# # # # # #           kubectl create secret generic mongodb-secret \
# # # # # #             --from-literal=MONGO_URI="mongodb+srv://jayachandran:jc%403747%40jai@cluster0.w45he.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0" \
# # # # # #             --dry-run=client -o yaml | kubectl apply -f -
          
# # # # # #           # Update image tags in deployment files
# # # # # #           sed -i "s|\${DOCKER_USERNAME}|${{ secrets.DOCKERHUB_USERNAME }}|g" k8.yaml
# # # # # #           sed -i "s|latest|${{ github.sha }}|g" k8.yaml
          
# # # # # #           # Apply the configurations
# # # # # #           kubectl apply -f k8.yaml
          
# # # # # #           # Wait for deployments to be ready
# # # # # #           kubectl rollout status deployment/frontend-deployment
# # # # # #           kubectl rollout status deployment/backend-deployment

# # # # # #   report:
# # # # # #     needs: [frontend-security, backend-security, frontend-build-push, backend-build-push, deploy]
# # # # # #     runs-on: ubuntu-latest
# # # # # #     if: always()
# # # # # #     steps:
# # # # # #       - name: Generate Final Report
# # # # # #         run: |
# # # # # #           echo "# Pipeline Security Report" >> $GITHUB_STEP_SUMMARY
# # # # # #           echo "## Build & Deploy Status" >> $GITHUB_STEP_SUMMARY
# # # # # #           echo "- Frontend Build: ${{ needs.frontend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # #           echo "- Backend Build: ${{ needs.backend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # #           echo "- Deployment: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # #           echo "## Security Summary" >> $GITHUB_STEP_SUMMARY
# # # # # #           echo "### Frontend" >> $GITHUB_STEP_SUMMARY
# # # # # #           echo "- Security Scan Status: ${{ needs.frontend-security.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # #           echo "### Backend" >> $GITHUB_STEP_SUMMARY
# # # # # #           echo "- Security Scan Status: ${{ needs.backend-security.result }}" >> $GITHUB_STEP_SUMMARY

# # # # # # permissions:
# # # # # #   contents: read
# # # # # #   security-events: write
# # # # # #   id-token: write
# # # # # name: Security, Build & Deploy Pipeline

# # # # # on:
# # # # #   workflow_dispatch:
# # # # #   push:
# # # # #     branches: [main]
# # # # #   pull_request:
# # # # #     branches: [main]

# # # # # env:
# # # # #   NODE_OPTIONS: --openssl-legacy-provider
# # # # #   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
# # # # #   GKE_CLUSTER: cluster-1 
# # # # #   GKE_ZONE: asia-south1-a   

# # # # # jobs:
# # # # #   frontend-security:
# # # # #     runs-on: ubuntu-latest
# # # # #     steps:
# # # # #       - uses: actions/checkout@v4.1.1
# # # # #         with:
# # # # #           repository: jai3747/MY-FRONTEND
# # # # #       - uses: actions/setup-node@v4.0.2
# # # # #         with:
# # # # #           node-version: '18'
# # # # #           cache: 'npm'
      
# # # # #       - name: Update Dependencies
# # # # #         run: |
# # # # #           npm install
# # # # #           git config --global user.email "mjai3747@gmail.com"
# # # # #           git config --global user.name "jai3747"
# # # # #           git add package-lock.json
# # # # #           git commit -m "Update package-lock.json" || echo "No changes to commit"
      
# # # # #       - name: Run Snyk Scan
# # # # #         run: |
# # # # #           npm install -g snyk
# # # # #           snyk test --json > frontend-sac.json || true
# # # # #         env:
# # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # # #       - name: Run Semgrep Scan
# # # # #         uses: semgrep/semgrep-action@v1
# # # # #         with:
# # # # #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# # # # #           publishDeployment: 1
# # # # #           generateSarif: 1

# # # # #   frontend-build-push:
# # # # #     needs: frontend-security
# # # # #     runs-on: ubuntu-latest
# # # # #     steps:
# # # # #       - uses: actions/checkout@v4.1.1
# # # # #         with:
# # # # #           repository: jai3747/MY-FRONTEND
      
# # # # #       - name: Set up Docker Buildx
# # # # #         uses: docker/setup-buildx-action@v3
      
# # # # #       - name: Login to DockerHub
# # # # #         uses: docker/login-action@v3
# # # # #         with:
# # # # #           username: ${{ secrets.DOCKERHUB_USERNAME }}
# # # # #           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
# # # # #       # Build image first
# # # # #       - name: Build Frontend Image
# # # # #         uses: docker/build-push-action@v5
# # # # #         with:
# # # # #           context: .
# # # # #           load: true
# # # # #           tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}
      
# # # # #       # Run Trivy scan on built image
# # # # #       - name: Set up Trivy
# # # # #         uses: aquasecurity/setup-trivy@v0.2.2
# # # # #         with:
# # # # #           trivy-version: latest

# # # # #       - name: Run Trivy vulnerability scanner
# # # # #         run: |
# # # # #           trivy image \
# # # # #             --format sarif \
# # # # #             --output trivy-results.sarif \
# # # # #             --severity HIGH,CRITICAL \
# # # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}

# # # # #       # Push if scan passes
# # # # #       - name: Push Frontend Image
# # # # #         uses: docker/build-push-action@v5
# # # # #         with:
# # # # #           context: .
# # # # #           push: true
# # # # #           tags: |
# # # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}
# # # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:latest
# # # # #           cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:buildcache
# # # # #           cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:buildcache,mode=max

# # # # #   backend-security:
# # # # #     runs-on: ubuntu-latest
# # # # #     steps:
# # # # #       - uses: actions/checkout@v4.1.1
# # # # #         with:
# # # # #           repository: jai3747/MY-BACKEND
# # # # #       - uses: actions/setup-node@v4.0.2
# # # # #         with:
# # # # #           node-version: '18'
# # # # #           cache: 'npm'
      
# # # # #       - name: Update Dependencies
# # # # #         run: |
# # # # #           npm install
# # # # #           git config --global user.email "mjai3747@gmail.com"
# # # # #           git config --global user.name "jai3747"
# # # # #           git add package-lock.json
# # # # #           git commit -m "Update package-lock.json" || echo "No changes to commit"
      
# # # # #       - name: Run Snyk Scan
# # # # #         run: |
# # # # #           npm install -g snyk
# # # # #           snyk test --json > backend-sac.json || true
# # # # #         env:
# # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # # #       - name: Run Semgrep Scan
# # # # #         uses: semgrep/semgrep-action@v1
# # # # #         with:
# # # # #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# # # # #           publishDeployment: 1
# # # # #           generateSarif: 1

# # # # #   backend-build-push:
# # # # #     needs: backend-security
# # # # #     runs-on: ubuntu-latest
# # # # #     steps:
# # # # #       - uses: actions/checkout@v4.1.1
# # # # #         with:
# # # # #           repository: jai3747/MY-BACKEND
      
# # # # #       - name: Set up Docker Buildx
# # # # #         uses: docker/setup-buildx-action@v3
      
# # # # #       - name: Login to DockerHub
# # # # #         uses: docker/login-action@v3
# # # # #         with:
# # # # #           username: ${{ secrets.DOCKERHUB_USERNAME }}
# # # # #           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
# # # # #       # Build image first
# # # # #       - name: Build Backend Image
# # # # #         uses: docker/build-push-action@v5
# # # # #         with:
# # # # #           context: .
# # # # #           load: true
# # # # #           tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}
      
# # # # #       # Run Trivy scan on built image
# # # # #       - name: Set up Trivy
# # # # #         uses: aquasecurity/setup-trivy@v0.2.2
# # # # #         with:
# # # # #           trivy-version: latest

# # # # #       - name: Run Trivy vulnerability scanner
# # # # #         run: |
# # # # #           trivy image \
# # # # #             --format sarif \
# # # # #             --output trivy-results.sarif \
# # # # #             --severity HIGH,CRITICAL \
# # # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}

# # # # #       # Push if scan passes
# # # # #       - name: Push Backend Image
# # # # #         uses: docker/build-push-action@v5
# # # # #         with:
# # # # #           context: .
# # # # #           push: true
# # # # #           tags: |
# # # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}
# # # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:latest
# # # # #           cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-backend:buildcache
# # # # #           cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-backend:buildcache,mode=max

# # # # #   deploy:
# # # # #     needs: [frontend-build-push, backend-build-push]
# # # # #     runs-on: ubuntu-latest
# # # # #     environment: production
# # # # #     steps:
# # # # #       - name: Checkout
# # # # #         uses: actions/checkout@v4.1.1
      
# # # # #       - name: Set up Cloud SDK
# # # # #         uses: google-github-actions/setup-gcloud@v1
# # # # #         with:
# # # # #           version: '>= 363.0.0'
# # # # #           project_id: ${{ secrets.GCP_PROJECT_ID }}
# # # # #           service_account_key: ${{ secrets.GCP_SA_KEY }}
      
# # # # #       - name: Get GKE Credentials
# # # # #         run: |
# # # # #           gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}
      
# # # # #       - name: Deploy to GKE
# # # # #         run: |
# # # # #           # Create MongoDB credentials secret
# # # # #           kubectl create secret generic mongodb-secret \
# # # # #             --from-literal=MONGO_URI="mongodb+srv://jayachandran:jc%403747%40jai@cluster0.w45he.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0" \
# # # # #             --dry-run=client -o yaml | kubectl apply -f -
          
# # # # #           # Update image tags in deployment files
# # # # #           sed -i "s|\${DOCKER_USERNAME}|${{ secrets.DOCKERHUB_USERNAME }}|g" k8.yaml
# # # # #           sed -i "s|latest|${{ github.sha }}|g" k8.yaml
          
# # # # #           # Apply the configurations
# # # # #           kubectl apply -f k8.yaml
          
# # # # #           # Wait for deployments to be ready
# # # # #           kubectl rollout status deployment/frontend-deployment
# # # # #           kubectl rollout status deployment/backend-deployment

# # # # #   report:
# # # # #     needs: [frontend-security, backend-security, frontend-build-push, backend-build-push, deploy]
# # # # #     runs-on: ubuntu-latest
# # # # #     if: always()
# # # # #     steps:
# # # # #       - name: Generate Final Report
# # # # #         run: |
# # # # #           echo "# Pipeline Security Report" >> $GITHUB_STEP_SUMMARY
# # # # #           echo "## Build & Deploy Status" >> $GITHUB_STEP_SUMMARY
# # # # #           echo "- Frontend Build: ${{ needs.frontend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
# # # # #           echo "- Backend Build: ${{ needs.backend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
# # # # #           echo "- Deployment: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
# # # # #           echo "## Security Summary" >> $GITHUB_STEP_SUMMARY
# # # # #           echo "### Frontend" >> $GITHUB_STEP_SUMMARY
# # # # #           echo "- Security Scan Status: ${{ needs.frontend-security.result }}" >> $GITHUB_STEP_SUMMARY
# # # # #           echo "### Backend" >> $GITHUB_STEP_SUMMARY
# # # # #           echo "- Security Scan Status: ${{ needs.backend-security.result }}" >> $GITHUB_STEP_SUMMARY

# # # # # permissions:
# # # # #   contents: read
# # # # #   security-events: write
# # # # #   id-token: write
# # # # name: Security, Build & Deploy Pipeline

# # # # on:
# # # #   workflow_dispatch:
# # # #   push:
# # # #     branches: [main]
# # # #   pull_request:
# # # #     branches: [main]

# # # # env:
# # # #   NODE_OPTIONS: --openssl-legacy-provider
# # # #   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
# # # #   GKE_CLUSTER: cluster-1 
# # # #   GKE_ZONE: asia-south1-a
# # # #   PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

# # # # jobs:
# # # #   frontend-security:
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - uses: actions/checkout@v4.1.1
# # # #         with:
# # # #           repository: jai3747/MY-FRONTEND
# # # #       - uses: actions/setup-node@v4.0.2
# # # #         with:
# # # #           node-version: '18'
# # # #           cache: 'npm'
      
# # # #       - name: Update Dependencies
# # # #         run: |
# # # #           npm install
# # # #           git config --global user.email "mjai3747@gmail.com"
# # # #           git config --global user.name "jai3747"
# # # #           git add package-lock.json
# # # #           git commit -m "Update package-lock.json" || echo "No changes to commit"
      
# # # #       - name: Run Snyk Scan
# # # #         run: |
# # # #           npm install -g snyk
# # # #           snyk test --json > frontend-sac.json || true
# # # #         env:
# # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # #       - name: Run Semgrep Scan
# # # #         uses: semgrep/semgrep-action@v1
# # # #         with:
# # # #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# # # #           publishDeployment: 1
# # # #           generateSarif: 1

# # # #   frontend-build-push:
# # # #     needs: frontend-security
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - uses: actions/checkout@v4.1.1
# # # #         with:
# # # #           repository: jai3747/MY-FRONTEND
      
# # # #       - name: Set up Docker Buildx
# # # #         uses: docker/setup-buildx-action@v3
      
# # # #       - name: Login to DockerHub
# # # #         uses: docker/login-action@v3
# # # #         with:
# # # #           username: ${{ secrets.DOCKERHUB_USERNAME }}
# # # #           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
# # # #       - name: Build Frontend Image
# # # #         uses: docker/build-push-action@v5
# # # #         with:
# # # #           context: .
# # # #           load: true
# # # #           tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}
      
# # # #       - name: Set up Trivy
# # # #         uses: aquasecurity/setup-trivy@v0.2.2
# # # #         with:
# # # #           trivy-version: latest

# # # #       - name: Run Trivy vulnerability scanner
# # # #         run: |
# # # #           trivy image \
# # # #             --format sarif \
# # # #             --output trivy-results.sarif \
# # # #             --severity HIGH,CRITICAL \
# # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}

# # # #       - name: Push Frontend Image
# # # #         uses: docker/build-push-action@v5
# # # #         with:
# # # #           context: .
# # # #           push: true
# # # #           tags: |
# # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}
# # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:latest
# # # #           cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:buildcache
# # # #           cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:buildcache,mode=max

# # # #   backend-security:
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - uses: actions/checkout@v4.1.1
# # # #         with:
# # # #           repository: jai3747/MY-BACKEND
# # # #       - uses: actions/setup-node@v4.0.2
# # # #         with:
# # # #           node-version: '18'
# # # #           cache: 'npm'
      
# # # #       - name: Update Dependencies
# # # #         run: |
# # # #           npm install
# # # #           git config --global user.email "mjai3747@gmail.com"
# # # #           git config --global user.name "jai3747"
# # # #           git add package-lock.json
# # # #           git commit -m "Update package-lock.json" || echo "No changes to commit"
      
# # # #       - name: Run Snyk Scan
# # # #         run: |
# # # #           npm install -g snyk
# # # #           snyk test --json > backend-sac.json || true
# # # #         env:
# # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # #       - name: Run Semgrep Scan
# # # #         uses: semgrep/semgrep-action@v1
# # # #         with:
# # # #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# # # #           publishDeployment: 1
# # # #           generateSarif: 1

# # # #   backend-build-push:
# # # #     needs: backend-security
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - uses: actions/checkout@v4.1.1
# # # #         with:
# # # #           repository: jai3747/MY-BACKEND
      
# # # #       - name: Set up Docker Buildx
# # # #         uses: docker/setup-buildx-action@v3
      
# # # #       - name: Login to DockerHub
# # # #         uses: docker/login-action@v3
# # # #         with:
# # # #           username: ${{ secrets.DOCKERHUB_USERNAME }}
# # # #           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
# # # #       - name: Build Backend Image
# # # #         uses: docker/build-push-action@v5
# # # #         with:
# # # #           context: .
# # # #           load: true
# # # #           tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}
      
# # # #       - name: Set up Trivy
# # # #         uses: aquasecurity/setup-trivy@v0.2.2
# # # #         with:
# # # #           trivy-version: latest

# # # #       - name: Run Trivy vulnerability scanner
# # # #         run: |
# # # #           trivy image \
# # # #             --format sarif \
# # # #             --output trivy-results.sarif \
# # # #             --severity HIGH,CRITICAL \
# # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}

# # # #       - name: Push Backend Image
# # # #         uses: docker/build-push-action@v5
# # # #         with:
# # # #           context: .
# # # #           push: true
# # # #           tags: |
# # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}
# # # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:latest
# # # #           cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-backend:buildcache
# # # #           cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-backend:buildcache,mode=max

# # # #   deploy:
# # # #     needs: [frontend-build-push, backend-build-push]
# # # #     runs-on: ubuntu-latest
# # # #     environment: production

# # # #     permissions:
# # # #       contents: 'read'
# # # #       id-token: 'write'

# # # #     steps:
# # # #       - name: Checkout repository
# # # #         uses: actions/checkout@v4.1.1

# # # #       - name: Authenticate to Google Cloud
# # # #         id: auth
# # # #         uses: google-github-actions/auth@v1
# # # #         with:
# # # #           credentials_json: '${{ secrets.GCP_SA_KEY }}'

# # # #       - name: Set up Cloud SDK
# # # #         uses: google-github-actions/setup-gcloud@v1
# # # #         with:
# # # #           version: '>= 363.0.0'
# # # #           project_id: ${{ secrets.GCP_PROJECT_ID }}

# # # #       - name: Get GKE Credentials
# # # #         run: |
# # # #           gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
# # # #             --zone ${{ env.GKE_ZONE }} \
# # # #             --project ${{ secrets.GCP_PROJECT_ID }}
      
# # # #       - name: Deploy to GKE
# # # #         run: |
# # # #           # Create MongoDB credentials secret
# # # #           kubectl create secret generic mongodb-secret \
# # # #             --from-literal=MONGO_URI="${{ secrets.MONGODB_URI }}" \
# # # #             --dry-run=client -o yaml | kubectl apply -f -
          
# # # #           # Update image tags in deployment files
# # # #           sed -i "s|\${DOCKER_USERNAME}|${{ secrets.DOCKERHUB_USERNAME }}|g" k8.yaml
# # # #           sed -i "s|latest|${{ github.sha }}|g" k8.yaml
          
# # # #           # Apply the configurations
# # # #           kubectl apply -f k8.yaml
          
# # # #           # Wait for deployments to be ready
# # # #           kubectl rollout status deployment/frontend-deployment
# # # #           kubectl rollout status deployment/backend-deployment

# # # #   report:
# # # #     needs: [frontend-security, backend-security, frontend-build-push, backend-build-push, deploy]
# # # #     runs-on: ubuntu-latest
# # # #     if: always()
# # # #     steps:
# # # #       - name: Generate Final Report
# # # #         run: |
# # # #           echo "# Pipeline Security Report" >> $GITHUB_STEP_SUMMARY
# # # #           echo "## Build & Deploy Status" >> $GITHUB_STEP_SUMMARY
# # # #           echo "- Frontend Build: ${{ needs.frontend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
# # # #           echo "- Backend Build: ${{ needs.backend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
# # # #           echo "- Deployment: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
# # # #           echo "## Security Summary" >> $GITHUB_STEP_SUMMARY
# # # #           echo "### Frontend" >> $GITHUB_STEP_SUMMARY
# # # #           echo "- Security Scan Status: ${{ needs.frontend-security.result }}" >> $GITHUB_STEP_SUMMARY
# # # #           echo "### Backend" >> $GITHUB_STEP_SUMMARY
# # # #           echo "- Security Scan Status: ${{ needs.backend-security.result }}" >> $GITHUB_STEP_SUMMARY

# # # # permissions:
# # # #   contents: read
# # # #   security-events: write
# # # #   id-token: write

# # # name: Security, Build & Deploy Pipeline

# # # on:
# # #   workflow_dispatch:
# # #   push:
# # #     branches: [main]
# # #   pull_request:
# # #     branches: [main]

# # # env:
# # #   NODE_OPTIONS: --openssl-legacy-provider
# # #   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
# # #   GKE_CLUSTER: cluster-1 
# # #   GKE_ZONE: asia-south1-a
# # #   PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

# # # jobs:
# # #   frontend-security:
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - uses: actions/checkout@v4.1.1
# # #         with:
# # #           repository: jai3747/MY-FRONTEND
# # #       - uses: actions/setup-node@v4.0.2
# # #         with:
# # #           node-version: '18'
# # #           cache: 'npm'
      
# # #       - name: Update Dependencies
# # #         run: |
# # #           npm install
# # #           git config --global user.email "mjai3747@gmail.com"
# # #           git config --global user.name "jai3747"
# # #           git add package-lock.json
# # #           git commit -m "Update package-lock.json" || echo "No changes to commit"
      
# # #       - name: Run Snyk Scan
# # #         run: |
# # #           npm install -g snyk
# # #           snyk test --json > frontend-sac.json || true
# # #         env:
# # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # #       - name: Run Semgrep Scan
# # #         uses: semgrep/semgrep-action@v1
# # #         with:
# # #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# # #           publishDeployment: 1
# # #           generateSarif: 1

# # #   frontend-build-push:
# # #     needs: frontend-security
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - uses: actions/checkout@v4.1.1
# # #         with:
# # #           repository: jai3747/MY-FRONTEND
      
# # #       - name: Set up Docker Buildx
# # #         uses: docker/setup-buildx-action@v3
      
# # #       - name: Login to DockerHub
# # #         uses: docker/login-action@v3
# # #         with:
# # #           username: ${{ secrets.DOCKERHUB_USERNAME }}
# # #           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
# # #       - name: Build Frontend Image
# # #         uses: docker/build-push-action@v5
# # #         with:
# # #           context: .
# # #           load: true
# # #           tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}
      
# # #       - name: Set up Trivy
# # #         uses: aquasecurity/setup-trivy@v0.2.2
# # #         with:
# # #           trivy-version: latest

# # #       - name: Run Trivy vulnerability scanner
# # #         run: |
# # #           trivy image \
# # #             --format sarif \
# # #             --output trivy-results.sarif \
# # #             --severity HIGH,CRITICAL \
# # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}

# # #       - name: Push Frontend Image
# # #         uses: docker/build-push-action@v5
# # #         with:
# # #           context: .
# # #           push: true
# # #           tags: |
# # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}
# # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:latest
# # #           cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:buildcache
# # #           cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:buildcache,mode=max

# # #   backend-security:
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - uses: actions/checkout@v4.1.1
# # #         with:
# # #           repository: jai3747/MY-BACKEND
# # #       - uses: actions/setup-node@v4.0.2
# # #         with:
# # #           node-version: '18'
# # #           cache: 'npm'
      
# # #       - name: Update Dependencies
# # #         run: |
# # #           npm install
# # #           git config --global user.email "mjai3747@gmail.com"
# # #           git config --global user.name "jai3747"
# # #           git add package-lock.json
# # #           git commit -m "Update package-lock.json" || echo "No changes to commit"
      
# # #       - name: Run Snyk Scan
# # #         run: |
# # #           npm install -g snyk
# # #           snyk test --json > backend-sac.json || true
# # #         env:
# # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # #       - name: Run Semgrep Scan
# # #         uses: semgrep/semgrep-action@v1
# # #         with:
# # #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# # #           publishDeployment: 1
# # #           generateSarif: 1

# # #   backend-build-push:
# # #     needs: backend-security
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - uses: actions/checkout@v4.1.1
# # #         with:
# # #           repository: jai3747/MY-BACKEND
      
# # #       - name: Set up Docker Buildx
# # #         uses: docker/setup-buildx-action@v3
      
# # #       - name: Login to DockerHub
# # #         uses: docker/login-action@v3
# # #         with:
# # #           username: ${{ secrets.DOCKERHUB_USERNAME }}
# # #           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
# # #       - name: Build Backend Image
# # #         uses: docker/build-push-action@v5
# # #         with:
# # #           context: .
# # #           load: true
# # #           tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}
      
# # #       - name: Set up Trivy
# # #         uses: aquasecurity/setup-trivy@v0.2.2
# # #         with:
# # #           trivy-version: latest

# # #       - name: Run Trivy vulnerability scanner
# # #         run: |
# # #           trivy image \
# # #             --format sarif \
# # #             --output trivy-results.sarif \
# # #             --severity HIGH,CRITICAL \
# # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}

# # #       - name: Push Backend Image
# # #         uses: docker/build-push-action@v5
# # #         with:
# # #           context: .
# # #           push: true
# # #           tags: |
# # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}
# # #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:latest
# # #           cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-backend:buildcache
# # #           cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-backend:buildcache,mode=max

# # #   deploy:
# # #     needs: [frontend-build-push, backend-build-push]
# # #     runs-on: ubuntu-latest
# # #     environment: production

# # #     permissions:
# # #       contents: 'read'
# # #       id-token: 'write'

# # #     steps:
# # #       - name: Checkout repository
# # #         uses: actions/checkout@v4.1.1

# # #       - name: Authenticate to Google Cloud
# # #         id: auth
# # #         uses: google-github-actions/auth@v1
# # #         with:
# # #           credentials_json: '${{ secrets.GCP_SA_KEY }}'

# # #       - name: Set up Cloud SDK
# # #         uses: google-github-actions/setup-gcloud@v1
# # #         with:
# # #           version: '>= 363.0.0'
# # #           project_id: ${{ secrets.GCP_PROJECT_ID }}

# # #       - name: Install GKE Auth Plugin
# # #         run: |
# # #           apt-get update && apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

# # #       - name: Get GKE Credentials
# # #         run: |
# # #           gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
# # #             --zone ${{ env.GKE_ZONE }} \
# # #             --project ${{ secrets.GCP_PROJECT_ID }}
      
# # #       # - name: Deploy to GKE
# # #       #   run: |
# # #       #     # Create MongoDB credentials secret
# # #       #     kubectl create secret generic mongodb-secret \
# # #       #       --from-literal=MONGO_URI="${{ secrets.MONGODB_URI }}" \
# # #       #       --dry-run=client -o yaml | kubectl apply -f -
          
# # #       #     # Update image tags in deployment files
# # #       #     sed -i "s|\${DOCKER_USERNAME}|${{ secrets.DOCKERHUB_USERNAME }}|g" k8.yaml
# # #       #     sed -i "s|latest|${{ github.sha }}|g" k8.yaml
          
# # #       #     # Apply the configurations
# # #       #     kubectl apply -f k8.yaml
          
# # #       #     # Wait for deployments to be ready
# # #       #     kubectl rollout status deployment/frontend-deployment
# # #       #     kubectl rollout status deployment/backend-deployment

# # #       #     # Get pods and services status
# # #       #     echo "Pod Status:"
# # #       #     kubectl get pods
          
# # #       #     echo "Services Status:"
# # #       #     kubectl get svc
# # #  deploy:
# # #     needs: [frontend-build-push, backend-build-push]
# # #     runs-on: ubuntu-latest
# # #     environment: production

# # #     permissions:
# # #       contents: 'read'
# # #       id-token: 'write'

# # #     steps:
# # #       - name: Checkout repository
# # #         uses: actions/checkout@v4.1.1

# # #       - name: Authenticate to Google Cloud
# # #         id: auth
# # #         uses: google-github-actions/auth@v1
# # #         with:
# # #           credentials_json: '${{ secrets.GCP_SA_KEY }}'

# # #       - name: Set up Cloud SDK
# # #         uses: google-github-actions/setup-gcloud@v1
# # #         with:
# # #           version: '>= 363.0.0'
# # #           project_id: ${{ secrets.GCP_PROJECT_ID }}

# # #       - name: Install GKE Auth Plugin
# # #         run: |
# # #           sudo rm -rf /var/lib/apt/lists/lock
# # #           sudo rm -rf /var/cache/apt/archives/lock
# # #           sudo rm -rf /var/lib/dpkg/lock*
# # #           sudo apt-get update
# # #           sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

# # #       - name: Get GKE Credentials
# # #         run: |
# # #           gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
# # #             --zone ${{ env.GKE_ZONE }} \
# # #             --project ${{ secrets.GCP_PROJECT_ID }}
      
# # #       - name: Deploy to GKE
# # #         run: |
# # #           # Create MongoDB credentials secret
# # #           kubectl create secret generic mongodb-secret \
# # #             --from-literal=MONGO_URI="${{ secrets.MONGODB_URI }}" \
# # #             --dry-run=client -o yaml | kubectl apply -f -
          
# # #           # Update image tags in deployment files
# # #           sed -i "s|\${DOCKER_USERNAME}|${{ secrets.DOCKERHUB_USERNAME }}|g" k8.yaml
# # #           sed -i "s|latest|${{ github.sha }}|g" k8.yaml
          
# # #           # Apply the configurations
# # #           kubectl apply -f k8.yaml
          
# # #           # Wait for deployments to be ready
# # #           kubectl rollout status deployment/frontend-deployment
# # #           kubectl rollout status deployment/backend-deployment

# # #           # Get pods and services status
# # #           echo "Pod Status:"
# # #           kubectl get pods
          
# # #           echo "Services Status:"
# # #           kubectl get svc

# # #   report:
# # #     needs: [frontend-security, backend-security, frontend-build-push, backend-build-push, deploy]
# # #     runs-on: ubuntu-latest
# # #     if: always()
# # #     steps:
# # #       - name: Generate Final Report
# # #         run: |
# # #           echo "# Pipeline Security Report" >> $GITHUB_STEP_SUMMARY
# # #           echo "## Build & Deploy Status" >> $GITHUB_STEP_SUMMARY
# # #           echo "- Frontend Build: ${{ needs.frontend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
# # #           echo "- Backend Build: ${{ needs.backend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
# # #           echo "- Deployment: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
# # #           echo "## Security Summary" >> $GITHUB_STEP_SUMMARY
# # #           echo "### Frontend" >> $GITHUB_STEP_SUMMARY
# # #           echo "- Security Scan Status: ${{ needs.frontend-security.result }}" >> $GITHUB_STEP_SUMMARY
# # #           echo "### Backend" >> $GITHUB_STEP_SUMMARY
# # #           echo "- Security Scan Status: ${{ needs.backend-security.result }}" >> $GITHUB_STEP_SUMMARY

# # # permissions:
# # #   contents: read
# # #   security-events: write
# # #   id-token: write
# # name: Security, Build & Deploy Pipeline

# # on:
# #   workflow_dispatch:
# #   push:
# #     branches: [main]
# #   pull_request:
# #     branches: [main]

# # env:
# #   NODE_OPTIONS: --openssl-legacy-provider
# #   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
# #   GKE_CLUSTER: cluster-1 
# #   GKE_ZONE: asia-south1-a
# #   PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

# # jobs:
# #   frontend-security:
# #     runs-on: ubuntu-latest
# #     steps:
# #       - uses: actions/checkout@v4.1.1
# #         with:
# #           repository: jai3747/MY-FRONTEND
# #       - uses: actions/setup-node@v4.0.2
# #         with:
# #           node-version: '18'
# #           cache: 'npm'
      
# #       - name: Update Dependencies
# #         run: |
# #           npm install
# #           git config --global user.email "mjai3747@gmail.com"
# #           git config --global user.name "jai3747"
# #           git add package-lock.json
# #           git commit -m "Update package-lock.json" || echo "No changes to commit"
      
# #       - name: Run Snyk Scan
# #         run: |
# #           npm install -g snyk
# #           snyk test --json > frontend-sac.json || true
# #         env:
# #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# #       - name: Run Semgrep Scan
# #         uses: semgrep/semgrep-action@v1
# #         with:
# #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# #           publishDeployment: 1
# #           generateSarif: 1

# #   frontend-build-push:
# #     needs: frontend-security
# #     runs-on: ubuntu-latest
# #     steps:
# #       - uses: actions/checkout@v4.1.1
# #         with:
# #           repository: jai3747/MY-FRONTEND
      
# #       - name: Set up Docker Buildx
# #         uses: docker/setup-buildx-action@v3
      
# #       - name: Login to DockerHub
# #         uses: docker/login-action@v3
# #         with:
# #           username: ${{ secrets.DOCKERHUB_USERNAME }}
# #           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
# #       - name: Build Frontend Image
# #         uses: docker/build-push-action@v5
# #         with:
# #           context: .
# #           load: true
# #           tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}
      
# #       - name: Set up Trivy
# #         uses: aquasecurity/setup-trivy@v0.2.2
# #         with:
# #           trivy-version: latest

# #       - name: Run Trivy vulnerability scanner
# #         run: |
# #           trivy image \
# #             --format sarif \
# #             --output trivy-results.sarif \
# #             --severity HIGH,CRITICAL \
# #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}

# #       - name: Push Frontend Image
# #         uses: docker/build-push-action@v5
# #         with:
# #           context: .
# #           push: true
# #           tags: |
# #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}
# #             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:latest
# #           cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:buildcache
# #           cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:buildcache,mode=max

# #   backend-security:
# #     runs-on: ubuntu-latest
# #     steps:
# #       - uses: actions/checkout@v4.1.1
# #         with:
# #           repository: jai3747/MY-BACKEND
# #       - uses: actions/setup-node@v4.0.2
# #         with:
# #           node-version: '18'
# #           cache: 'npm'
      
# #       - name: Update Dependencies
# #         run: |
# #           npm install
# #           git config --global user.email "mjai3747@gmail.com"
# #           git config --global user.name "jai3747"
# #           git add package-lock.json
# #           git commit -m "Update package-lock.json" || echo "No changes to commit"
      
# #       - name: Run Snyk Scan
# #         run: |
# #           npm install -g snyk
# #           snyk test --json > backend-sac.json || true
# #         env:
# #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# #       - name: Run Semgrep Scan
# #         uses: semgrep/semgrep-action@v1
# #         with:
# #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# #           publishDeployment: 1
# #           generateSarif: 1

# #   backend-build-push:
# #     needs: backend-security
# #     runs-on: ubuntu-latest
# #     steps:
# #       - uses: actions/checkout@v4.1.1
# #         with:
# #           repository: jai3747/MY-BACKEND
      
# #       - name: Set up Docker Buildx
# #         uses: docker/setup-buildx-action@v3
      
# #       - name: Login to DockerHub
# #         uses: docker/login-action@v3
# #         with:
# #           username: ${{ secrets.DOCKERHUB_USERNAME }}
# #           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
# #       - name: Build Backend Image
# #         uses: docker/build-push-action@v5
# #         with:
# #           context: .
# #           load: true
# #           tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}
      
# #       - name: Set up Trivy
# #         uses: aquasecurity/setup-trivy@v0.2.2
# #         with:
# #           trivy-version: latest

# #       - name: Run Trivy vulnerability scanner
# #         run: |
# #           trivy image \
# #             --format sarif \
# #             --output trivy-results.sarif \
# #             --severity HIGH,CRITICAL \
# #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}

# #       - name: Push Backend Image
# #         uses: docker/build-push-action@v5
# #         with:
# #           context: .
# #           push: true
# #           tags: |
# #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}
# #             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:latest
# #           cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-backend:buildcache
# #           cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-backend:buildcache,mode=max

# #   deploy:
# #     needs: [frontend-build-push, backend-build-push]
# #     runs-on: ubuntu-latest
# #     environment: production

# #     permissions:
# #       contents: 'read'
# #       id-token: 'write'

# #     steps:
# #       - name: Checkout repository
# #         uses: actions/checkout@v4.1.1

# #       - name: Authenticate to Google Cloud
# #         id: auth
# #         uses: google-github-actions/auth@v1
# #         with:
# #           credentials_json: '${{ secrets.GCP_SA_KEY }}'

# #       - name: Set up Cloud SDK
# #         uses: google-github-actions/setup-gcloud@v1
# #         with:
# #           version: '>= 363.0.0'
# #           project_id: ${{ secrets.GCP_PROJECT_ID }}

# #       - name: Install GKE Auth Plugin
# #         run: |
# #           sudo rm -rf /var/lib/apt/lists/lock
# #           sudo rm -rf /var/cache/apt/archives/lock
# #           sudo rm -rf /var/lib/dpkg/lock*
# #           sudo apt-get update
# #           sudo apt-get install -y apt-transport-https ca-certificates gnupg
# #           sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

# #       - name: Install kubectl
# #         run: |
# #           sudo apt-get install -y kubectl

# #       - name: Get GKE Credentials
# #         run: |
# #           gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
# #             --zone ${{ env.GKE_ZONE }} \
# #             --project ${{ secrets.GCP_PROJECT_ID }}
      
# #       - name: Deploy to GKE
# #         run: |
# #           # Create MongoDB credentials secret
# #           kubectl create secret generic mongodb-secret \
# #             --from-literal=MONGO_URI="${{ secrets.MONGODB_URI }}" \
# #             --dry-run=client -o yaml | kubectl apply -f -
          
# #           # Update image tags in deployment files
# #           sed -i "s|\${DOCKER_USERNAME}|${{ secrets.DOCKERHUB_USERNAME }}|g" k8.yaml
# #           sed -i "s|latest|${{ github.sha }}|g" k8.yaml
          
# #           # Apply the configurations
# #           kubectl apply -f k8.yaml
          
# #           # Wait for deployments to be ready
# #           kubectl rollout status deployment/frontend-deployment
# #           kubectl rollout status deployment/backend-deployment

# #           # Display deployment status
# #           echo "Pod Status:"
# #           kubectl get pods -o wide
          
# #           echo "Services Status:"
# #           kubectl get svc -o wide
          
# #           echo "Deployment Status:"
# #           kubectl get deployments -o wide

# #   report:
# #     needs: [frontend-security, backend-security, frontend-build-push, backend-build-push, deploy]
# #     runs-on: ubuntu-latest
# #     if: always()
# #     steps:
# #       - name: Generate Final Report
# #         run: |
# #           echo "# Pipeline Security Report" >> $GITHUB_STEP_SUMMARY
# #           echo "## Build & Deploy Status" >> $GITHUB_STEP_SUMMARY
# #           echo "- Frontend Build: ${{ needs.frontend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
# #           echo "- Backend Build: ${{ needs.backend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
# #           echo "- Deployment: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
# #           echo "## Security Summary" >> $GITHUB_STEP_SUMMARY
# #           echo "### Frontend" >> $GITHUB_STEP_SUMMARY
# #           echo "- Security Scan Status: ${{ needs.frontend-security.result }}" >> $GITHUB_STEP_SUMMARY
# #           echo "### Backend" >> $GITHUB_STEP_SUMMARY
# #           echo "- Security Scan Status: ${{ needs.backend-security.result }}" >> $GITHUB_STEP_SUMMARY

# # permissions:
# #   contents: read
# #   security-events: write
# #   id-token: write
# name: Security, Build & Deploy Pipeline

# on:
#   workflow_dispatch:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# env:
#   NODE_OPTIONS: --openssl-legacy-provider
#   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#   GKE_CLUSTER: cluster-1 
#   GKE_ZONE: asia-south1-a
#   PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

# jobs:
#   frontend-security:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4.1.1
#         with:
#           repository: jai3747/MY-FRONTEND
#       - uses: actions/setup-node@v4.0.2
#         with:
#           node-version: '18'
#           cache: 'npm'
      
#       - name: Update Dependencies
#         run: |
#           npm install
#           git config --global user.email "mjai3747@gmail.com"
#           git config --global user.name "jai3747"
#           git add package-lock.json
#           git commit -m "Update package-lock.json" || echo "No changes to commit"
      
#       - name: Run Snyk Scan
#         run: |
#           npm install -g snyk
#           snyk test --json > frontend-sac.json || true
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

#       - name: Run Semgrep Scan
#         uses: semgrep/semgrep-action@v1
#         with:
#           publishToken: ${{ secrets.SEMGREP_TOKEN }}
#           publishDeployment: 1
#           generateSarif: 1

#   frontend-build-push:
#     needs: frontend-security
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4.1.1
#         with:
#           repository: jai3747/MY-FRONTEND
      
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
      
#       - name: Login to DockerHub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
#       - name: Build Frontend Image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           load: true
#           tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}
      
#       - name: Set up Trivy
#         uses: aquasecurity/setup-trivy@v0.2.2
#         with:
#           trivy-version: latest

#       - name: Run Trivy vulnerability scanner
#         run: |
#           trivy image \
#             --format sarif \
#             --output trivy-results.sarif \
#             --severity HIGH,CRITICAL \
#             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}

#       - name: Push Frontend Image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           tags: |
#             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:${{ github.sha }}
#             ${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:latest
#           cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:buildcache
#           cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-frontend:buildcache,mode=max

#   backend-security:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4.1.1
#         with:
#           repository: jai3747/MY-BACKEND
#       - uses: actions/setup-node@v4.0.2
#         with:
#           node-version: '18'
#           cache: 'npm'
      
#       - name: Update Dependencies
#         run: |
#           npm install
#           git config --global user.email "mjai3747@gmail.com"
#           git config --global user.name "jai3747"
#           git add package-lock.json
#           git commit -m "Update package-lock.json" || echo "No changes to commit"
      
#       - name: Run Snyk Scan
#         run: |
#           npm install -g snyk
#           snyk test --json > backend-sac.json || true
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

#       - name: Run Semgrep Scan
#         uses: semgrep/semgrep-action@v1
#         with:
#           publishToken: ${{ secrets.SEMGREP_TOKEN }}
#           publishDeployment: 1
#           generateSarif: 1

#   backend-build-push:
#     needs: backend-security
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4.1.1
#         with:
#           repository: jai3747/MY-BACKEND
      
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
      
#       - name: Login to DockerHub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
      
#       - name: Build Backend Image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           load: true
#           tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}
      
#       - name: Set up Trivy
#         uses: aquasecurity/setup-trivy@v0.2.2
#         with:
#           trivy-version: latest

#       - name: Run Trivy vulnerability scanner
#         run: |
#           trivy image \
#             --format sarif \
#             --output trivy-results.sarif \
#             --severity HIGH,CRITICAL \
#             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}

#       - name: Push Backend Image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           tags: |
#             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:${{ github.sha }}
#             ${{ secrets.DOCKERHUB_USERNAME }}/my-backend:latest
#           cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-backend:buildcache
#           cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-backend:buildcache,mode=max

#   deploy:
#     needs: [frontend-build-push, backend-build-push]
#     runs-on: ubuntu-latest
#     environment: production

#     permissions:
#       contents: 'read'
#       id-token: 'write'

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4.1.1

#       - name: Authenticate to Google Cloud
#         id: auth
#         uses: google-github-actions/auth@v1
#         with:
#           credentials_json: '${{ secrets.GCP_SA_KEY }}'

#       - name: Set up Cloud SDK
#         uses: google-github-actions/setup-gcloud@v1
#         with:
#           version: '>= 363.0.0'
#           project_id: ${{ secrets.GCP_PROJECT_ID }}

#       - name: Setup Google Cloud SDK and Install GKE Auth Plugin
#         run: |
#           # Remove any locks
#           sudo rm -rf /var/lib/apt/lists/lock
#           sudo rm -rf /var/cache/apt/archives/lock
#           sudo rm -rf /var/lib/dpkg/lock*
          
#           # Add Google Cloud SDK repository
#           echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          
#           # Download Google's public key
#           curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          
#           # Update package list and install required packages
#           sudo apt-get update
#           sudo apt-get install -y apt-transport-https ca-certificates gnupg
          
#           # Install Google Cloud SDK and GKE auth plugin
#           sudo apt-get install -y google-cloud-sdk google-cloud-sdk-gke-gcloud-auth-plugin

#       - name: Install kubectl
#         run: |
#           sudo apt-get install -y kubectl

#       - name: Get GKE Credentials
#         run: |
#           gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
#             --zone ${{ env.GKE_ZONE }} \
#             --project ${{ secrets.GCP_PROJECT_ID }}
      
#       - name: Deploy to GKE
#         run: |
#           # Create MongoDB credentials secret
#           kubectl create secret generic mongodb-secret \
#             --from-literal=MONGO_URI="${{ secrets.MONGODB_URI }}" \
#             --dry-run=client -o yaml | kubectl apply -f -
          
#           # Update image tags in deployment files
#           sed -i "s|\${DOCKER_USERNAME}|${{ secrets.DOCKERHUB_USERNAME }}|g" k8.yaml
#           sed -i "s|latest|${{ github.sha }}|g" k8.yaml
          
#           # Apply the configurations
#           kubectl apply -f MY-BACKEND/DEPLOYEMENT/K8/k8.yaml

          
#           # Wait for deployments to be ready
#           kubectl rollout status deployment/frontend-deployment
#           kubectl rollout status deployment/backend-deployment

#           # Display deployment status
#           echo "Pod Status:"
#           kubectl get pods -o wide
          
#           echo "Services Status:"
#           kubectl get svc -o wide
          
#           echo "Deployment Status:"
#           kubectl get deployments -o wide

#   report:
#     needs: [frontend-security, backend-security, frontend-build-push, backend-build-push, deploy]
#     runs-on: ubuntu-latest
#     if: always()
#     steps:
#       - name: Generate Final Report
#         run: |
#           echo "# Pipeline Security Report" >> $GITHUB_STEP_SUMMARY
#           echo "## Build & Deploy Status" >> $GITHUB_STEP_SUMMARY
#           echo "- Frontend Build: ${{ needs.frontend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
#           echo "- Backend Build: ${{ needs.backend-build-push.result }}" >> $GITHUB_STEP_SUMMARY
#           echo "- Deployment: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
#           echo "## Security Summary" >> $GITHUB_STEP_SUMMARY
#           echo "### Frontend" >> $GITHUB_STEP_SUMMARY
#           echo "- Security Scan Status: ${{ needs.frontend-security.result }}" >> $GITHUB_STEP_SUMMARY
#           echo "### Backend" >> $GITHUB_STEP_SUMMARY
#           echo "- Security Scan Status: ${{ needs.backend-security.result }}" >> $GITHUB_STEP_SUMMARY

# permissions:
#   contents: read
#   security-events: write
#   id-token: write
name: Security, Build & Deploy Pipeline

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_OPTIONS: --openssl-legacy-provider
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  GKE_CLUSTER: cluster-1 
  GKE_ZONE: asia-south1-a
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [frontend, backend]
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          repository: jai3747/MY-${{ matrix.component }}
      
      - uses: actions/setup-node@v4.0.2
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Update Dependencies
        run: |
          npm install
          git config --global user.email "mjai3747@gmail.com"
          git config --global user.name "jai3747"
          git add package-lock.json
          git commit -m "Update package-lock.json" || echo "No changes to commit"
      
      - name: Run Snyk Scan
        run: |
          npm install -g snyk
          snyk test --json > ${{ matrix.component }}-sac.json || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Semgrep Scan
        uses: semgrep/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_TOKEN }}
          publishDeployment: 1
          generateSarif: 1

  build-and-push:
    needs: security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [frontend, backend]
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          repository: jai3747/MY-${{ matrix.component }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build Image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-${{ matrix.component }}:${{ github.sha }}
      
      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.2.2
        with:
          trivy-version: latest

      - name: Run Trivy vulnerability scanner
        run: |
          trivy image \
            --format sarif \
            --output trivy-results.sarif \
            --severity HIGH,CRITICAL \
            ${{ secrets.DOCKERHUB_USERNAME }}/my-${{ matrix.component }}:${{ github.sha }}

      - name: Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/my-${{ matrix.component }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/my-${{ matrix.component }}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-${{ matrix.component }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-${{ matrix.component }}:buildcache,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout Backend Repository
        uses: actions/checkout@v4.1.1
        with:
          repository: jai3747/MY-BACKEND
          path: MY-BACKEND

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '>= 363.0.0'
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Setup Google Cloud SDK and Install GKE Auth Plugin
        run: |
          sudo rm -rf /var/lib/apt/lists/lock
          sudo rm -rf /var/cache/apt/archives/lock
          sudo rm -rf /var/lib/dpkg/lock*
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates gnupg
          sudo apt-get install -y google-cloud-sdk google-cloud-sdk-gke-gcloud-auth-plugin

      - name: Install kubectl
        run: |
          sudo apt-get install -y kubectl

      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --zone ${{ env.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Deploy to GKE
        working-directory: MY-BACKEND
        run: |
          # Create MongoDB credentials secret
          kubectl create secret generic mongodb-secret \
            --from-literal=MONGO_URI="${{ secrets.MONGODB_URI }}" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Update image tags in deployment files
          cd DEPLOYEMENT/K8
          sed -i "s|\${DOCKER_USERNAME}|${{ secrets.DOCKERHUB_USERNAME }}|g" k8.yaml
          sed -i "s|latest|${{ github.sha }}|g" k8.yaml
          
          # Apply the configurations
          kubectl apply -f k8.yaml
          
          # Wait for deployments to be ready
          kubectl rollout status deployment/frontend-deployment
          kubectl rollout status deployment/backend-deployment

          # Display deployment status
          echo "Pod Status:"
          kubectl get pods -o wide
          
          echo "Services Status:"
          kubectl get svc -o wide
          
          echo "Deployment Status:"
          kubectl get deployments -o wide

  report:
    needs: [security, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate Final Report
        run: |
          echo "# Pipeline Security Report" >> $GITHUB_STEP_SUMMARY
          echo "## Build & Deploy Status" >> $GITHUB_STEP_SUMMARY
          echo "- Build & Push: ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "## Security Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scans: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY

permissions:
  contents: read
  security-events: write
  id-token: write
