
name: Security & Build Pipeline

on:
  workflow_dispatch:
    inputs:
      build_new_images:
        description: 'Build new Docker images?'
        required: true
        type: boolean
        default: true
      frontend_image_tag:
        description: 'Frontend image tag to use (if not building new)'
        required: false
        type: string
        default: 'v13'
      backend_image_tag:
        description: 'Backend image tag to use (if not building new)'
        required: false
        type: string
        default: 'v13'
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_OPTIONS: --openssl-legacy-provider
  REGISTRY: docker.io
  FRONTEND_IMAGE: jai3747/my-frontend-app
  BACKEND_IMAGE: jai3747/my-backend-app
  FRONTEND_NEW_TAG: v13
  BACKEND_NEW_TAG: v13

jobs:
  frontend-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          repository: jai3747/MY-FRONTEND
      - uses: actions/setup-node@v4.0.2
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: SAC (Snyk) Scan
        run: |
          npm install
          npm install -g snyk
          snyk test --json > frontend-sac.json || true
          echo "### Frontend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          jq -r '.vulnerabilities[] | "- " + .title + " (Severity: " + .severity + ")"' frontend-sac.json >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found"
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Frontend TruffleHog
        run: |
          docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest \
            filesystem /pwd --json > frontend-secrets.json || true
          echo "### Frontend Secrets Found" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          jq -r '.[] | "- Found in: " + .file + " (Type: " + .type + ")"' frontend-secrets.json >> $GITHUB_STEP_SUMMARY || echo "No secrets found"
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  backend-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          repository: jai3747/MY-BACKEND
      - uses: actions/setup-node@v4.0.2
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: SAC (Snyk) Scan
        run: |
          npm install
          npm install -g snyk
          snyk test --json > backend-sac.json || true
          echo "### Backend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          jq -r '.vulnerabilities[] | "- " + .title + " (Severity: " + .severity + ")"' backend-sac.json >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found"
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Backend TruffleHog
        run: |
          docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest \
            filesystem /pwd --json > backend-secrets.json || true
          echo "### Backend Secrets Found" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          jq -r '.[] | "- Found in: " + .file + " (Type: " + .type + ")"' backend-secrets.json >> $GITHUB_STEP_SUMMARY || echo "No secrets found"
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  frontend-build:
    needs: frontend-security
    runs-on: ubuntu-latest
    steps:
      - name: Set Image Tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.build_new_images }}" == "true" ]]; then
              echo "IMAGE_TAG=${{ env.FRONTEND_NEW_TAG }}" >> $GITHUB_ENV
              echo "BUILD_IMAGE=true" >> $GITHUB_ENV
            else
              echo "IMAGE_TAG=${{ github.event.inputs.frontend_image_tag }}" >> $GITHUB_ENV
              echo "BUILD_IMAGE=false" >> $GITHUB_ENV
            fi
          else
            echo "IMAGE_TAG=${{ env.FRONTEND_NEW_TAG }}" >> $GITHUB_ENV
            echo "BUILD_IMAGE=true" >> $GITHUB_ENV
          fi

      - uses: actions/checkout@v4.1.1
        if: env.BUILD_IMAGE == 'true'
        with:
          repository: jai3747/MY-FRONTEND

      - uses: actions/setup-node@v4.0.2
        if: env.BUILD_IMAGE == 'true'
        with:
          node-version: '18'
          cache: 'npm'

      - name: Update Dependencies
        if: env.BUILD_IMAGE == 'true'
        run: |
          npm install nth-check@2.0.1 semver@7.5.2 --save-dev
          npm install react@18 react-dom@18 react-scripts@5.0.1 --save

      - name: Build Frontend
        if: env.BUILD_IMAGE == 'true'
        run: |
          npm install
          if ! grep -q '"build"' package.json; then
            npm pkg set scripts.build="react-scripts build"
          fi
          npm run build
        env:
          CI: false
      
      - name: Build and Push Docker Image
        if: env.BUILD_IMAGE == 'true'
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }} .
          
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push ${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  backend-build:
    needs: backend-security
    runs-on: ubuntu-latest
    steps:
      - name: Set Image Tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.build_new_images }}" == "true" ]]; then
              echo "IMAGE_TAG=${{ env.BACKEND_NEW_TAG }}" >> $GITHUB_ENV
              echo "BUILD_IMAGE=true" >> $GITHUB_ENV
            else
              echo "IMAGE_TAG=${{ github.event.inputs.backend_image_tag }}" >> $GITHUB_ENV
              echo "BUILD_IMAGE=false" >> $GITHUB_ENV
            fi
          else
            echo "IMAGE_TAG=${{ env.BACKEND_NEW_TAG }}" >> $GITHUB_ENV
            echo "BUILD_IMAGE=true" >> $GITHUB_ENV
          fi

      - uses: actions/checkout@v4.1.1
        if: env.BUILD_IMAGE == 'true'
        with:
          repository: jai3747/MY-BACKEND

      - uses: actions/setup-node@v4.0.2
        if: env.BUILD_IMAGE == 'true'
        with:
          node-version: '18'
          cache: 'npm'

      - name: Build Backend
        if: env.BUILD_IMAGE == 'true'
        run: |
          npm install
          npm run build

      - name: Build and Push Docker Image
        if: env.BUILD_IMAGE == 'true'
        run: |
          docker build -t ${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }} .
          
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push ${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  report:
    needs: [frontend-security, backend-security, frontend-build, backend-build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate Final Report
        run: |
          echo "# Pipeline Security Report" >> $GITHUB_STEP_SUMMARY
          echo "## Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Build (v9): ${{ needs.frontend-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Build (v7): ${{ needs.backend-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "## Security Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan Status: ${{ needs.frontend-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Backend" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan Status: ${{ needs.backend-security.result }}" >> $GITHUB_STEP_SUMMARY

permissions:
  contents: read
  security-events: write
