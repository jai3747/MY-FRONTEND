name: Security, Build & Deploy Pipeline with Enhanced Reporting
on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  NODE_OPTIONS: --openssl-legacy-provider
  NODE_VERSION: '18'
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  GKE_CLUSTER: cluster-1 
  GKE_ZONE: asia-south1-a
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  MONGODB_VERSION: '6.0'
  DOCKER_TAG: ${{ github.sha }}
  K8S_PATH: MY-BACKEND/mern-app

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [frontend, backend]
        task: [snyk, semgrep, docker]
      fail-fast: false
    
    steps:
      - name: Checkout Main Repository
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Checkout Component Repository
        uses: actions/checkout@v4.1.1
        with:
          repository: jai3747/MY-${{ matrix.component }}
          path: MY-${{ matrix.component }}
          fetch-depth: 0

      - name: Cache Docker layers
        if: matrix.task == 'docker'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.component }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.component }}-

      - name: Setup Node.js
        if: matrix.task != 'docker'
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: MY-${{ matrix.component }}/package-lock.json

      - name: Install and Fix Dependencies
        if: matrix.task != 'docker'
        working-directory: MY-${{ matrix.component }}
        run: |
          npm ci || npm install
          npm audit fix || true
          npm audit fix --force || true
          npm audit --json > ../${{ matrix.component }}-npm-audit.json || true

      - name: Run Snyk Scan and Auto Fix
        if: matrix.task == 'snyk'
        working-directory: MY-${{ matrix.component }}
        continue-on-error: true
        run: |
          npm install -g snyk
          snyk test --json > ../${{ matrix.component }}-snyk.json || true
          snyk wizard --dry-run || true
          snyk monitor || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      
      - name: Upload Snyk Results
        if: matrix.task == 'snyk'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.component }}-snyk-results
          path: ${{ matrix.component }}-snyk.json
          retention-days: 5

      - name: Run Semgrep Scan
        if: matrix.task == 'semgrep'
        uses: semgrep/semgrep-action@v1
        continue-on-error: true
        with:
          publishToken: ${{ secrets.SEMGREP_TOKEN }}
          publishDeployment: 1
          generateSarif: 1
          output: ${{ matrix.component }}-semgrep.sarif
          config: >-
            p/default
            p/security-audit
            p/owasp-top-ten

      - name: Upload Semgrep Results
        if: matrix.task == 'semgrep'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.component }}-semgrep-results
          path: ${{ matrix.component }}-semgrep.sarif
          retention-days: 5

      - name: Set up Docker Buildx
        if: matrix.task == 'docker'
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: matrix.task == 'docker'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Build and Push
        if: matrix.task == 'docker'
        uses: docker/build-push-action@v5
        with:
          context: MY-${{ matrix.component }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/my-${{ matrix.component }}-app:${{ env.DOCKER_TAG }}
            ${{ secrets.DOCKERHUB_USERNAME }}/my-${{ matrix.component }}-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}

      - name: Run Trivy Scan
        if: matrix.task == 'docker'
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/my-${{ matrix.component }}-app:${{ env.DOCKER_TAG }}
          format: 'sarif'
          output: '${{ matrix.component }}-trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          timeout: '10m'
          scanners: 'vuln,secret,config'
          ignore-unfixed: true

      - name: Upload Trivy Results
        if: matrix.task == 'docker'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.component }}-trivy-results
          path: ${{ matrix.component }}-trivy-results.sarif
          retention-days: 5

  
  deploy:
    needs: security-and-build
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout Main Repository
        uses: actions/checkout@v4.1.1

      - name: Checkout Backend Repository
        uses: actions/checkout@v4.1.1
        with:
          repository: jai3747/MY-BACKEND
          path: MY-BACKEND
          fetch-depth: 0

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Install kubectl and helm
        run: |
          sudo apt-get update
          sudo apt-get install -y kubectl
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials "$GKE_CLUSTER" \
            --zone "$GKE_ZONE" \
            --project "$PROJECT_ID"

      - name: Deploy with Helm
        working-directory: ${{ env.K8S_PATH }}
        run: |
          # Update values with current image tags
          sed -i "s|\${DOCKER_USERNAME}|$DOCKER_USERNAME|g" values.yaml
          
          # Update image tags
          yq e -i ".frontend.image.tag = \"$GITHUB_SHA\"" values.yaml
          yq e -i ".backend.image.tag = \"$GITHUB_SHA\"" values.yaml
          
          # Install/Upgrade Helm chart with retry logic
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if helm upgrade --install mern-app . \
              --wait \
              --timeout 10m \
              --set mongodb.auth.rootPassword="${{ secrets.MONGO_PASSWORD }}" \
              --set mongodb.auth.username="${{ secrets.MONGO_USERNAME }}" \
              --set mongodb.auth.password="${{ secrets.MONGO_PASSWORD }}" \
              --set mongodb.auth.database="mern-app"; then
              echo "‚úÖ Helm deployment successful!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "‚ùå Failed to deploy after $MAX_RETRIES attempts"
                exit 1
              fi
              echo "‚ö†Ô∏è Deployment failed, attempt $RETRY_COUNT of $MAX_RETRIES. Retrying in 30s..."
              sleep 30
            fi
          done

      - name: Verify Deployment
        run: |
          echo "üîç Checking deployment status..."
          
          # Function to check resource status
          check_resource() {
            local resource_type=$1
            local min_ready=$2
            
            echo "Checking $resource_type..."
            kubectl get $resource_type
            
            # Wait for resources to be ready
            if ! kubectl wait --for=condition=ready $resource_type --all --timeout=300s; then
              echo "‚ùå $resource_type failed to become ready within timeout"
              return 1
            fi
            
            # Check minimum number of ready resources
            ready_count=$(kubectl get $resource_type -o json | jq '.items | length')
            if [ "$ready_count" -lt "$min_ready" ]; then
              echo "‚ùå Expected at least $min_ready $resource_type, but found $ready_count"
              return 1
            fi
            
            echo "‚úÖ $resource_type check passed"
            return 0
          }
          
          # Check different resource types
          check_resource "pods" 2 || exit 1
          check_resource "deployments" 2 || exit 1
          check_resource "services" 2 || exit 1
          
          # Additional health checks
          echo "üè• Performing health checks..."
          
          # Get services
          FRONTEND_SERVICE=$(kubectl get svc -l app=frontend -o jsonpath='{.items[0].metadata.name}')
          BACKEND_SERVICE=$(kubectl get svc -l app=backend -o jsonpath='{.items[0].metadata.name}')
          
          # Wait for endpoints
          kubectl wait --for=condition=available --timeout=300s deployment/frontend
          kubectl wait --for=condition=available --timeout=300s deployment/backend
          
          echo "üìä Resource Status Summary:"
          kubectl get pods,svc,deployments,statefulsets
          
          echo "üéØ Deployment verification completed successfully!"

  report:
    needs: [security-and-build, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download Scan Results
        uses: actions/download-artifact@v3
        with:
          path: scan-results

      - name: Process Scan Results
        run: |
          echo "# üîí Security Scan Summary Report" >> $GITHUB_STEP_SUMMARY
          
          # Frontend Security Analysis
          echo "## üåê Frontend Security Analysis" >> $GITHUB_STEP_SUMMARY
          
          echo "### 1Ô∏è‚É£ Snyk Dependency Scan" >> $GITHUB_STEP_SUMMARY
          if [ -f "scan-results/frontend-snyk-results/frontend-snyk.json" ]; then
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            jq -r '
              "Vulnerabilities Found:
              üî¥ Critical: \(.vulnerabilities | map(select(.severity == "critical")) | length)
              üü† High: \(.vulnerabilities | map(select(.severity == "high")) | length)
              üü° Medium: \(.vulnerabilities | map(select(.severity == "medium")) | length)
              üü¢ Low: \(.vulnerabilities | map(select(.severity == "low")) | length)"
            ' scan-results/frontend-snyk-results/frontend-snyk.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            echo "#### Critical & High Priority Issues:" >> $GITHUB_STEP_SUMMARY
            jq -r '.vulnerabilities[] | 
              select(.severity == "critical" or .severity == "high") | 
              "- [\(.severity | ascii_upcase)] \(.title) in \(.packageName) \(.packageVersion)
                  ‚Ü≥ Fix: \(.fixedIn[0] // "No fix available")
                  ‚Ü≥ CVE: \(.identifiers.CVE[0] // "No CVE")"
            ' scan-results/frontend-snyk-results/frontend-snyk.json | head -n 10 >> $GITHUB_STEP_SUMMARY
          fi

          echo "### 2Ô∏è‚É£ Semgrep Code Analysis" >> $GITHUB_STEP_SUMMARY
          if [ -f "scan-results/frontend-semgrep-results/frontend-semgrep.sarif" ]; then
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            jq -r '
              .runs[].results | 
              group_by(.level) | 
              map({level: .[0].level, count: length}) | 
              "Findings:
              üî¥ Error: \(map(select(.level == "error")) | .[0].count // 0)
              üü† Warning: \(map(select(.level == "warning")) | .[0].count // 0)
              üü° Note: \(map(select(.level == "note")) | .[0].count // 0)"
            ' scan-results/frontend-semgrep-results/frontend-semgrep.sarif >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            echo "#### High Priority Findings:" >> $GITHUB_STEP_SUMMARY
            jq -r '.runs[].results[] | 
              select(.level == "error" or .level == "warning") |
              "- [\(.level | ascii_upcase)] \(.message.text)
                  ‚Ü≥ File: \(.locations[0].physicalLocation.artifactLocation.uri)
                  ‚Ü≥ Line: \(.locations[0].physicalLocation.region.startLine)"
            ' scan-results/frontend-semgrep-results/frontend-semgrep.sarif | head -n 10 >> $GITHUB_STEP_SUMMARY
          fi

          echo "### 3Ô∏è‚É£ Trivy Container Scan" >> $GITHUB_STEP_SUMMARY
          if [ -f "scan-results/frontend-trivy-results/frontend-trivy-results.sarif" ]; then
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            jq -r '
              .runs[].results | 
              group_by(.level) | 
              map({level: .[0].level, count: length}) | 
              "Container Vulnerabilities:
              üî¥ Critical: \(map(select(.level == "error")) | .[0].count // 0)
              üü† High: \(map(select(.level == "warning")) | .[0].count // 0)
              üü° Medium: \(map(select(.level == "note")) | .[0].count // 0)"
            ' scan-results/frontend-trivy-results/frontend-trivy-results.sarif >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            echo "#### Critical Container Vulnerabilities:" >> $GITHUB_STEP_SUMMARY
            jq -r '.runs[].results[] | 
              select(.level == "error" or .level == "warning") |
              "- [\(.level | ascii_upcase)] \(.message.text)
                  ‚Ü≥ Component: \(.locations[0].physicalLocation.artifactLocation.uri // "Not specified")"
            ' scan-results/frontend-trivy-results/frontend-trivy-results.sarif | head -n 10 >> $GITHUB_STEP_SUMMARY
          fi

          # Backend Security Analysis
          echo "## ‚öôÔ∏è Backend Security Analysis" >> $GITHUB_STEP_SUMMARY
          
          echo "### 1Ô∏è‚É£ Snyk Dependency Scan" >> $GITHUB_STEP_SUMMARY
          if [ -f "scan-results/backend-snyk-results/backend-snyk.json" ]; then
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            jq -r '
              "Vulnerabilities Found:
              üî¥ Critical: \(.vulnerabilities | map(select(.severity == "critical")) | length)
              üü† High: \(.vulnerabilities | map(select(.severity == "high")) | length)
              üü° Medium: \(.vulnerabilities | map(select(.severity == "medium")) | length)
              üü¢ Low: \(.vulnerabilities | map(select(.severity == "low")) | length)"
            ' scan-results/backend-snyk-results/backend-snyk.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            echo "#### Critical & High Priority Issues:" >> $GITHUB_STEP_SUMMARY
            jq -r '.vulnerabilities[] | 
              select(.severity == "critical" or .severity == "high") | 
              "- [\(.severity | ascii_upcase)] \(.title) in \(.packageName) \(.packageVersion)
                  ‚Ü≥ Fix: \(.fixedIn[0] // "No fix available")
                  ‚Ü≥ CVE: \(.identifiers.CVE[0] // "No CVE")"
            ' scan-results/backend-snyk-results/backend-snyk.json | head -n 10 >> $GITHUB_STEP_SUMMARY
          fi

          echo "### 2Ô∏è‚É£ Semgrep Code Analysis" >> $GITHUB_STEP_SUMMARY
          if [ -f "scan-results/backend-semgrep-results/backend-semgrep.sarif" ]; then
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            jq -r '
              .runs[].results | 
              group_by(.level) | 
              map({level: .[0].level, count: length}) | 
              "Findings:
              üî¥ Error: \(map(select(.level == "error")) | .[0].count // 0)
              üü† Warning: \(map(select(.level == "warning")) | .[0].count // 0)
              üü° Note: \(map(select(.level == "note")) | .[0].count // 0)"
            ' scan-results/backend-semgrep-results/backend-semgrep.sarif >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            echo "#### High Priority Findings:" >> $GITHUB_STEP_SUMMARY
            jq -r '.runs[].results[] | 
              select(.level == "error" or .level == "warning") |
              "- [\(.level | ascii_upcase)] \(.message.text)
                  ‚Ü≥ File: \(.locations[0].physicalLocation.artifactLocation.uri)
                  ‚Ü≥ Line: \(.locations[0].physicalLocation.region.startLine)"
            ' scan-results/backend-semgrep-results/backend-semgrep.sarif | head -n 10 >> $GITHUB_STEP_SUMMARY
          fi

          echo "### 3Ô∏è‚É£ Trivy Container Scan" >> $GITHUB_STEP_SUMMARY
          if [ -f "scan-results/backend-trivy-results/backend-trivy-results.sarif" ]; then
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            jq -r '
              .runs[].results | 
              group_by(.level) | 
              map({level: .[0].level, count: length}) | 
              "Container Vulnerabilities:
              üî¥ Critical: \(map(select(.level == "error")) | .[0].count // 0)
              üü† High: \(map(select(.level == "warning")) | .[0].count // 0)
              üü° Medium: \(map(select(.level == "note")) | .[0].count // 0)"
            ' scan-results/backend-trivy-results/backend-trivy-results.sarif >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            echo "#### Critical Container Vulnerabilities:" >> $GITHUB_STEP_SUMMARY
            jq -r '.runs[].results[] | 
              select(.level == "error" or .level == "warning") |
              "- [\(.level | ascii_upcase)] \(.message.text)
                  ‚Ü≥ Component: \(.locations[0].physicalLocation.artifactLocation.uri // "Not specified")"
            ' scan-results/backend-trivy-results/backend-trivy-results.sarif | head -n 10 >> $GITHUB_STEP_SUMMARY
          fi

          # Summary Section
          echo "## üìä Overall Security Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Snyk Dependencies: $([ -f "scan-results/frontend-snyk-results/frontend-snyk.json" ] && jq '.vulnerabilities | length' scan-results/frontend-snyk-results/frontend-snyk.json || echo "N/A")" >> $GITHUB_STEP_SUMMARY
          echo "- Semgrep Findings: $([ -f "scan-results/frontend-semgrep-results/frontend-semgrep.sarif" ] && jq '.runs[].results | length' scan-results/frontend-semgrep-results/frontend-semgrep.sarif || echo "N/A")" >> $GITHUB_STEP_SUMMARY
          echo "- Trivy Container Issues: $([ -f "scan-results/frontend-trivy-results/frontend-trivy-results.sarif" ] && jq '.runs[].results | length' scan-results/frontend-trivy-results/frontend-trivy-results.sarif || echo "N/A")" >> $GITHUB_STEP_SUMMARY
          
          echo "### Backend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Snyk Dependencies: $([ -f "scan-results/backend-snyk-results/backend-snyk.json" ] && jq '.vulnerabilities | length' scan-results/backend-snyk-results/backend-snyk.json || echo "N/A")" >> $GITHUB_STEP_SUMMARY
          echo "- Semgrep Findings: $([ -f "scan-results/backend-semgrep-results/backend-semgrep.sarif" ] && jq '.runs[].results | length' scan-results/backend-semgrep-results/backend-semgrep.sarif || echo "N/A")" >> $GITHUB_STEP_SUMMARY
          echo "- Trivy Container Issues: $([ -f "scan-results/backend-trivy-results/backend-trivy-results.sarif" ] && jq '.runs[].results | length' scan-results/backend-trivy-results/backend-trivy-results.sarif || echo "N/A")" >> $GITHUB_STEP_SUMMARY



          

 

 

